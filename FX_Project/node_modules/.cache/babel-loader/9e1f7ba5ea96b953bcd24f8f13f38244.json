{"ast":null,"code":"import React, { Component } from \"react\";\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport { fetchCardDetailsSuccess, fetchCardDetailsFailure, deleteCardSuccess, deleteCardFailure, selectDefaultCardSuccess, selectDefaultCardFailure, fetchCardDetailsStart, addCardSuccess, addCardFailure } from \"../actions/CardsAction\";\nimport api from \"../../Environment\";\nimport { FETCH_CARD_DETAILS_START, DELETE_CARD_START, SELECT_DEFAULT_CARD_START, ADD_CARD_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nfunction* getCardDetailsAPI() {\n  try {\n    const response = yield api.postMethod(\"cards_list\");\n    if (response.data.success) {\n      yield put(fetchCardDetailsSuccess(response.data.data));\n    } else {\n      yield put(fetchCardDetailsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCardDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* deleteCardAPI() {\n  try {\n    const deleteCard = yield select(state => state.cards.deleteCard.data);\n    const response = yield api.postMethod(\"cards_delete\", deleteCard);\n    yield put(deleteCardSuccess(response.data.data));\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      yield put(fetchCardDetailsStart());\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* selectDefaultCardAPI() {\n  try {\n    const selectDefaultCard = yield select(state => state.cards.selectDefaultCard.inputData);\n    const response = yield api.postMethod(\"cards_default\", selectDefaultCard);\n    yield put(selectDefaultCardSuccess(response.data.data));\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      yield put(fetchCardDetailsStart());\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(selectDefaultCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* addCardAPI(action) {\n  try {\n    const response = yield api.postMethod(\"cards_add\", action.data);\n    if (response.data.success) {\n      yield put(addCardSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(addCardFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CARD_DETAILS_START, getCardDetailsAPI)]);\n  yield all([yield takeLatest(DELETE_CARD_START, deleteCardAPI)]);\n  yield all([yield takeLatest(SELECT_DEFAULT_CARD_START, selectDefaultCardAPI)]);\n  yield all([yield takeLatest(ADD_CARD_START, addCardAPI)]);\n}","map":{"version":3,"names":["React","Component","call","select","put","takeLatest","all","fetchCardDetailsSuccess","fetchCardDetailsFailure","deleteCardSuccess","deleteCardFailure","selectDefaultCardSuccess","selectDefaultCardFailure","fetchCardDetailsStart","addCardSuccess","addCardFailure","api","FETCH_CARD_DETAILS_START","DELETE_CARD_START","SELECT_DEFAULT_CARD_START","ADD_CARD_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","checkLogoutStatus","getCardDetailsAPI","response","postMethod","data","success","error","notificationMessage","message","deleteCardAPI","deleteCard","state","cards","selectDefaultCardAPI","selectDefaultCard","inputData","addCardAPI","action","pageSaga"],"sources":["/home/mts/FX-Project/src/store/sagas/CardsSaga.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport {\n  fetchCardDetailsSuccess,\n  fetchCardDetailsFailure,\n  deleteCardSuccess,\n  deleteCardFailure,\n  selectDefaultCardSuccess,\n  selectDefaultCardFailure,\n  fetchCardDetailsStart,\n  addCardSuccess,\n  addCardFailure,\n} from \"../actions/CardsAction\";\n\nimport api from \"../../Environment\";\nimport {\n  FETCH_CARD_DETAILS_START,\n  DELETE_CARD_START,\n  SELECT_DEFAULT_CARD_START,\n  ADD_CARD_START,\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\n\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\n\nfunction* getCardDetailsAPI() {\n  try {\n    const response = yield api.postMethod(\"cards_list\");\n\n    if (response.data.success) {\n      yield put(fetchCardDetailsSuccess(response.data.data));\n    } else {\n      yield put(fetchCardDetailsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCardDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteCardAPI() {\n  try {\n    const deleteCard = yield select((state) => state.cards.deleteCard.data);\n    const response = yield api.postMethod(\"cards_delete\", deleteCard);\n    yield put(deleteCardSuccess(response.data.data));\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(fetchCardDetailsStart());\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* selectDefaultCardAPI() {\n  try {\n    const selectDefaultCard = yield select(\n      (state) => state.cards.selectDefaultCard.inputData\n    );\n    const response = yield api.postMethod(\"cards_default\", selectDefaultCard);\n    yield put(selectDefaultCardSuccess(response.data.data));\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(fetchCardDetailsStart());\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(selectDefaultCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* addCardAPI(action) {\n  try {\n    const response = yield api.postMethod(\"cards_add\", action.data);\n\n    if (response.data.success) {\n      yield put(addCardSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(addCardFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CARD_DETAILS_START, getCardDetailsAPI)]);\n  yield all([yield takeLatest(DELETE_CARD_START, deleteCardAPI)]);\n  yield all([\n    yield takeLatest(SELECT_DEFAULT_CARD_START, selectDefaultCardAPI),\n  ]);\n  yield all([yield takeLatest(ADD_CARD_START, addCardAPI)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}