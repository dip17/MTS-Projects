{"ast":null,"code":"const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener('load', () => resolve(image));\n  image.addEventListener('error', error => reject(error));\n  image.setAttribute('crossOrigin', 'anonymous'); // needed to avoid cross-origin issues on CodeSandbox\n  image.src = url;\n});\nfunction getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n\n/**\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\n\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0, fileType) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * (maxSize / 2 * Math.sqrt(2));\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea;\n  canvas.height = safeArea;\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.rotate(getRadianAngle(rotation));\n  ctx.translate(-safeArea / 2, -safeArea / 2);\n\n  // draw rotated image and store data.\n  ctx.drawImage(image, safeArea / 2 - image.width * 0.5, safeArea / 2 - image.height * 0.5);\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(data, Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x), Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y));\n\n  // As Base64 string\n  return canvas.toDataURL(fileType);\n}","map":{"version":3,"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","rotation","fileType","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","round","x","y","toDataURL"],"sources":["/home/mts/FX-Project/src/components/Accounts/Profile/CropImageHelper.js"],"sourcesContent":["const createImage = url =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener('load', () => resolve(image))\n    image.addEventListener('error', error => reject(error))\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url\n  })\n\nfunction getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\n\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0 ,fileType) {\n  const image = await createImage(imageSrc)\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  const maxSize = Math.max(image.width, image.height)\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2))\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea\n  canvas.height = safeArea\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2)\n  ctx.rotate(getRadianAngle(rotation))\n  ctx.translate(-safeArea / 2, -safeArea / 2)\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5\n  )\n  const data = ctx.getImageData(0, 0, safeArea, safeArea)\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width\n  canvas.height = pixelCrop.height\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x),\n    Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)\n  )\n\n  // As Base64 string\n  return canvas.toDataURL(fileType);\n}"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,GAAG,IACrB,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/B,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EACzBD,KAAK,CAACE,gBAAgB,CAAC,MAAM,EAAE,MAAMJ,OAAO,CAACE,KAAK,CAAC,CAAC;EACpDA,KAAK,CAACE,gBAAgB,CAAC,OAAO,EAAEC,KAAK,IAAIJ,MAAM,CAACI,KAAK,CAAC,CAAC;EACvDH,KAAK,CAACI,YAAY,CAAC,aAAa,EAAE,WAAW,CAAC,EAAC;EAC/CJ,KAAK,CAACK,GAAG,GAAGT,GAAG;AACjB,CAAC,CAAC;AAEJ,SAASU,cAAcA,CAACC,WAAW,EAAE;EACnC,OAAQA,WAAW,GAAGC,IAAI,CAACC,EAAE,GAAI,GAAG;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAe,eAAeC,aAAaA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,GAAG,CAAC,EAAEC,QAAQ,EAAE;EACvF,MAAMd,KAAK,GAAG,MAAML,WAAW,CAACgB,QAAQ,CAAC;EACzC,MAAMI,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;EAEnC,MAAMC,OAAO,GAAGZ,IAAI,CAACa,GAAG,CAACrB,KAAK,CAACsB,KAAK,EAAEtB,KAAK,CAACuB,MAAM,CAAC;EACnD,MAAMC,QAAQ,GAAG,CAAC,IAAKJ,OAAO,GAAG,CAAC,GAAIZ,IAAI,CAACiB,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEnD;EACA;EACAV,MAAM,CAACO,KAAK,GAAGE,QAAQ;EACvBT,MAAM,CAACQ,MAAM,GAAGC,QAAQ;;EAExB;EACAN,GAAG,CAACQ,SAAS,CAACF,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAG,CAAC,CAAC;EACzCN,GAAG,CAACS,MAAM,CAACrB,cAAc,CAACO,QAAQ,CAAC,CAAC;EACpCK,GAAG,CAACQ,SAAS,CAAC,CAACF,QAAQ,GAAG,CAAC,EAAE,CAACA,QAAQ,GAAG,CAAC,CAAC;;EAE3C;EACAN,GAAG,CAACU,SAAS,CACX5B,KAAK,EACLwB,QAAQ,GAAG,CAAC,GAAGxB,KAAK,CAACsB,KAAK,GAAG,GAAG,EAChCE,QAAQ,GAAG,CAAC,GAAGxB,KAAK,CAACuB,MAAM,GAAG,GAChC,CAAC;EACD,MAAMM,IAAI,GAAGX,GAAG,CAACY,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEN,QAAQ,EAAEA,QAAQ,CAAC;;EAEvD;EACAT,MAAM,CAACO,KAAK,GAAGV,SAAS,CAACU,KAAK;EAC9BP,MAAM,CAACQ,MAAM,GAAGX,SAAS,CAACW,MAAM;;EAEhC;EACAL,GAAG,CAACa,YAAY,CACdF,IAAI,EACJrB,IAAI,CAACwB,KAAK,CAAC,CAAC,GAAGR,QAAQ,GAAG,CAAC,GAAGxB,KAAK,CAACsB,KAAK,GAAG,GAAG,GAAGV,SAAS,CAACqB,CAAC,CAAC,EAC9DzB,IAAI,CAACwB,KAAK,CAAC,CAAC,GAAGR,QAAQ,GAAG,CAAC,GAAGxB,KAAK,CAACuB,MAAM,GAAG,GAAG,GAAGX,SAAS,CAACsB,CAAC,CAChE,CAAC;;EAED;EACA,OAAOnB,MAAM,CAACoB,SAAS,CAACrB,QAAQ,CAAC;AACnC"},"metadata":{},"sourceType":"module"}