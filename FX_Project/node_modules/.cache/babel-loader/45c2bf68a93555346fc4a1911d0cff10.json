{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_USER_STORIES_START, STORY_FILE_UPLOAD_START, FETCH_STORIES_START, STORY_FILE_DELETE_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchStoriesSucess, fetchStoriesFailure, fetchuserStoriesSuccess, fetchUserStoriesFailure, storyFileUploadSuccess, storyFileUploadFailure, fetchStoriesStart, storyFileDeleteSuccess, storyFileDeleteFailure, fetchUserStoriesStart } from \"../actions/StoriesAction\";\nfunction* fetchUserStoriesAPI() {\n  try {\n    const skipCount = yield select(state => state.userStories.userStories.skip);\n    const response = yield api.postMethod(\"stories_list\", {\n      skip: skipCount\n    });\n    if (response.data.success) {\n      yield put(fetchuserStoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchUserStoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserStoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchStoriesAPI() {\n  try {\n    const response = yield api.postMethod(\"stories_home\");\n    if (response.data.success) {\n      yield put(fetchStoriesSucess(response.data.data));\n    } else {\n      yield put(fetchStoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchStoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* storyFileUploadAPI(action) {\n  try {\n    const response = yield api.postMethod(\"story_files_upload\", action.data);\n    if (response.data.success) {\n      yield put(storyFileUploadSuccess(response.data.data));\n      yield put(fetchStoriesStart());\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(storyFileUploadFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(storyFileUploadFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* storyFileDeleteAPI(action) {\n  try {\n    const response = yield api.postMethod(\"stories_delete\", action.data);\n    if (response.data.success) {\n      yield put(storyFileDeleteSuccess(response.data.data));\n      yield put(fetchUserStoriesStart());\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(storyFileDeleteFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(storyFileDeleteFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_STORIES_START, fetchStoriesAPI)]);\n  yield all([yield takeLatest(STORY_FILE_UPLOAD_START, storyFileUploadAPI)]);\n  yield all([yield takeLatest(FETCH_USER_STORIES_START, fetchUserStoriesAPI)]);\n  yield all([yield takeLatest(STORY_FILE_DELETE_START, storyFileDeleteAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","FETCH_USER_STORIES_START","STORY_FILE_UPLOAD_START","FETCH_STORIES_START","STORY_FILE_DELETE_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchStoriesSucess","fetchStoriesFailure","fetchuserStoriesSuccess","fetchUserStoriesFailure","storyFileUploadSuccess","storyFileUploadFailure","fetchStoriesStart","storyFileDeleteSuccess","storyFileDeleteFailure","fetchUserStoriesStart","fetchUserStoriesAPI","skipCount","state","userStories","skip","response","postMethod","data","success","error","notificationMessage","message","fetchStoriesAPI","storyFileUploadAPI","action","storyFileDeleteAPI","pageSaga"],"sources":["/home/mts/FX-Project/src/store/sagas/StoriesSaga.jsx"],"sourcesContent":["\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  FETCH_USER_STORIES_START,\n  STORY_FILE_UPLOAD_START,\n  FETCH_STORIES_START,\n  STORY_FILE_DELETE_START\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nimport {\n  fetchStoriesSucess,\n  fetchStoriesFailure,\n  fetchuserStoriesSuccess,\n  fetchUserStoriesFailure,\n  storyFileUploadSuccess,\n  storyFileUploadFailure,\n  fetchStoriesStart,\n  storyFileDeleteSuccess,\n  storyFileDeleteFailure,\n  fetchUserStoriesStart,\n} from \"../actions/StoriesAction\";\n\nfunction* fetchUserStoriesAPI() {\n  try {\n    const skipCount = yield select((state) => state.userStories.userStories.skip);\n    const response = yield api.postMethod(\"stories_list\", { skip: skipCount });\n\n    if (response.data.success) {\n      yield put(fetchuserStoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchUserStoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserStoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchStoriesAPI() {\n  try {\n    const response = yield api.postMethod(\"stories_home\");\n\n    if (response.data.success) {\n      yield put(fetchStoriesSucess(response.data.data));\n    } else {\n      yield put(fetchStoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchStoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* storyFileUploadAPI(action) {\n  try {\n    const response = yield api.postMethod(\"story_files_upload\" , action.data);\n\n    if (response.data.success) {\n      yield put(storyFileUploadSuccess(response.data.data));\n      yield put(fetchStoriesStart());\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(storyFileUploadFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(storyFileUploadFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* storyFileDeleteAPI(action) {\n  try {\n    const response = yield api.postMethod(\"stories_delete\" , action.data);\n\n    if (response.data.success) {\n      yield put(storyFileDeleteSuccess(response.data.data));\n      yield put(fetchUserStoriesStart())\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(storyFileDeleteFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(storyFileDeleteFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_STORIES_START, fetchStoriesAPI)]);\n  yield all([yield takeLatest(STORY_FILE_UPLOAD_START, storyFileUploadAPI)]);\n  yield all([yield takeLatest(FETCH_USER_STORIES_START, fetchUserStoriesAPI)]);\n  yield all([yield takeLatest(STORY_FILE_DELETE_START, storyFileDeleteAPI)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}