{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nfunction useAudioPlayer(src, loop, next, autoNext, props) {\n  const [duration, setDuration] = useState();\n  const [curTime, setCurTime] = useState();\n  const [playing, setPlaying] = useState(false);\n  const [isBuffering, setIsBuffering] = useState(false);\n  const [clickedTime, setClickedTime] = useState();\n  const audio = useRef(new Audio(src));\n  const changeSrc = newSrc => {\n    audio.current.src = newSrc;\n    // audio.current.currentTime = 0;\n  };\n  useEffect(() => {\n    // const audio = document.getElementById(\"audio\");\n\n    // state setters wrappers\n    const setAudioData = () => {\n      setDuration(audio.current.duration);\n      setCurTime(audio.current.currentTime);\n    };\n    const setAudioTime = () => setCurTime(audio.current.currentTime);\n\n    // DOM listeners: update React state on DOM events\n    audio.current.addEventListener(\"loadeddata\", setAudioData);\n    audio.current.addEventListener(\"timeupdate\", setAudioTime);\n    audio.current.addEventListener('ended', function () {\n      if (!loop) {\n        // audio.current.currentTime = 0;\n        if (next && autoNext) {\n          next();\n        } else {\n          setPlaying(false);\n          setCurTime(0);\n        }\n      }\n    }, false);\n\n    // audio.current.addEventListener('waiting', function () {\n    //   // window.alert('Waiting');\n    //   console.log(\"waiting\");\n    //   setIsBuffering(true);\n    // });\n\n    // audio.current.addEventListener('loadstart', function () {\n    //   // window.alert(\"Loading\");\n    //   console.log(\"Loading\");\n    //   setIsBuffering(true);\n    // });\n\n    // audio.current.addEventListener('progress', function () {\n    //   // do something, eg:\n    //   var timeRanges = audio.current.buffered;\n    //   if (timeRanges && timeRanges.length > 0) {\n    //     console.log(timeRanges);\n    //     setIsBuffering(false);\n    //     // do something with the TimeRanges object\n    //   }\n    // });\n\n    // React state listeners: update DOM on React state changes\n    playing ? audio.current.play() : audio.current.pause();\n    if (clickedTime && clickedTime !== curTime) {\n      audio.current.currentTime = clickedTime;\n      setClickedTime(null);\n    }\n\n    // effect cleanup\n    return () => {\n      audio.current.removeEventListener(\"loadeddata\", setAudioData);\n      audio.current.removeEventListener(\"timeupdate\", setAudioTime);\n      audio.current.removeEventListener(\"ended\", setAudioTime);\n      audio.current.pause();\n    };\n  });\n  const currentAudio = useSelector(state => state.chat.currentAudio);\n  useEffect(() => {\n    if (currentAudio.src !== src) {\n      setPlaying(false);\n    }\n  }, [currentAudio.src]);\n  return {\n    curTime,\n    duration,\n    playing,\n    setPlaying,\n    setClickedTime,\n    changeSrc,\n    isBuffering\n  };\n}\nconst mapStateToPros = state => ({\n  currentAudio: state.chat.currentAudio\n});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch\n  };\n}\nexport default useAudioPlayer;","map":{"version":3,"names":["useState","useEffect","useRef","useSelector","useAudioPlayer","src","loop","next","autoNext","props","duration","setDuration","curTime","setCurTime","playing","setPlaying","isBuffering","setIsBuffering","clickedTime","setClickedTime","audio","Audio","changeSrc","newSrc","current","setAudioData","currentTime","setAudioTime","addEventListener","play","pause","removeEventListener","currentAudio","state","chat","mapStateToPros","mapDispatchToProps","dispatch"],"sources":["/home/mts/Vishal/src/hooks/useAudioPlayer.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nfunction useAudioPlayer(src, loop, next, autoNext, props) {\n  const [duration, setDuration] = useState();\n  const [curTime, setCurTime] = useState();\n  const [playing, setPlaying] = useState(false);\n  const [isBuffering, setIsBuffering] = useState(false);\n  const [clickedTime, setClickedTime] = useState();\n  const audio = useRef(new Audio(src));\n\n  const changeSrc = (newSrc) => {\n    audio.current.src = newSrc;\n    // audio.current.currentTime = 0;\n  }\n\n  useEffect(() => {\n    // const audio = document.getElementById(\"audio\");\n\n    // state setters wrappers\n    const setAudioData = () => {\n      setDuration(audio.current.duration);\n      setCurTime(audio.current.currentTime);\n    }\n\n    const setAudioTime = () => setCurTime(audio.current.currentTime);\n\n    // DOM listeners: update React state on DOM events\n    audio.current.addEventListener(\"loadeddata\", setAudioData);\n\n    audio.current.addEventListener(\"timeupdate\", setAudioTime);\n\n    audio.current.addEventListener('ended', function () {\n      if (!loop) {\n        // audio.current.currentTime = 0;\n        if (next && autoNext) {\n          next();\n        } else {\n          setPlaying(false);\n          setCurTime(0);\n        }\n      }\n    }, false);\n\n    // audio.current.addEventListener('waiting', function () {\n    //   // window.alert('Waiting');\n    //   console.log(\"waiting\");\n    //   setIsBuffering(true);\n    // });\n\n    // audio.current.addEventListener('loadstart', function () {\n    //   // window.alert(\"Loading\");\n    //   console.log(\"Loading\");\n    //   setIsBuffering(true);\n    // });\n\n    // audio.current.addEventListener('progress', function () {\n    //   // do something, eg:\n    //   var timeRanges = audio.current.buffered;\n    //   if (timeRanges && timeRanges.length > 0) {\n    //     console.log(timeRanges);\n    //     setIsBuffering(false);\n    //     // do something with the TimeRanges object\n    //   }\n    // });\n\n    // React state listeners: update DOM on React state changes\n    playing ? audio.current.play() : audio.current.pause();\n\n    if (clickedTime && clickedTime !== curTime) {\n      audio.current.currentTime = clickedTime;\n      setClickedTime(null);\n    }\n\n    // effect cleanup\n    return () => {\n      audio.current.removeEventListener(\"loadeddata\", setAudioData);\n      audio.current.removeEventListener(\"timeupdate\", setAudioTime);\n      audio.current.removeEventListener(\"ended\", setAudioTime);\n      audio.current.pause();\n    }\n  });\n\n  const currentAudio = useSelector(state => state.chat.currentAudio);\n\n  useEffect(() => {\n    if (currentAudio.src !== src) {\n      setPlaying(false);\n    }\n  }, [currentAudio.src]);\n\n  return {\n    curTime,\n    duration,\n    playing,\n    setPlaying,\n    setClickedTime,\n    changeSrc,\n    isBuffering,\n  }\n}\n\nconst mapStateToPros = (state) => ({\n  currentAudio: state.chat.currentAudio,\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return { dispatch };\n}\n\nexport default useAudioPlayer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}