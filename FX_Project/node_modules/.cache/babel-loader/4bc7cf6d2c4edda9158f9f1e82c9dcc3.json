{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchSingleUserPostsFailure, fetchSingleUserPostsSuccess, fetchSingleUserProfileFailure, fetchSingleUserProfileSuccess, searchUserPostSuccess, searchUserPostFailure } from \"../actions/OtherUserAction\";\nimport { FETCH_SINGLE_USER_POSTS_START, FETCH_SINGLE_USER_PROFILE_START, SEARCH_USER_POST_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nfunction* fetchOtherUserProfileAPI() {\n  try {\n    const inputData = yield select(state => state.otherUser.userDetails.inputData);\n    if (inputData.user_unique_id == localStorage.getItem(\"user_unique_id\")) {\n      window.location.assign(\"/profile\");\n    }\n    const response = yield api.postMethod(\"other_profile\", inputData);\n    if (response.data.success) {\n      yield put(fetchSingleUserProfileSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleUserProfileFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/home\");\n    }\n  } catch (error) {\n    yield put(fetchSingleUserProfileFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchOtherUserPostAPI(action) {\n  try {\n    const response = yield api.postMethod(\"other_profile_posts\", action.data);\n    if (response.data.success) {\n      yield put(fetchSingleUserPostsSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleUserPostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleUserPostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* searchPostAPI() {\n  try {\n    const inputData = yield select(state => state.otherUser.searchPosts.inputData);\n    const response = yield api.postMethod(\"posts_search\", inputData);\n    if (response.data.success) {\n      yield put(fetchSingleUserPostsSuccess(response.data.data));\n    } else {\n      yield put(searchUserPostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(searchUserPostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_SINGLE_USER_PROFILE_START, fetchOtherUserProfileAPI)]);\n  yield all([yield takeLatest(FETCH_SINGLE_USER_POSTS_START, fetchOtherUserPostAPI)]);\n  yield all([yield takeLatest(SEARCH_USER_POST_START, searchPostAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchSingleUserPostsFailure","fetchSingleUserPostsSuccess","fetchSingleUserProfileFailure","fetchSingleUserProfileSuccess","searchUserPostSuccess","searchUserPostFailure","FETCH_SINGLE_USER_POSTS_START","FETCH_SINGLE_USER_PROFILE_START","SEARCH_USER_POST_START","checkLogoutStatus","fetchOtherUserProfileAPI","inputData","state","otherUser","userDetails","user_unique_id","localStorage","getItem","window","location","assign","response","postMethod","data","success","error","notificationMessage","message","fetchOtherUserPostAPI","action","searchPostAPI","searchPosts","pageSaga"],"sources":["/home/mts/Vishal/src/store/sagas/OtherUserSaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchSingleUserPostsFailure,\n  fetchSingleUserPostsSuccess,\n  fetchSingleUserProfileFailure,\n  fetchSingleUserProfileSuccess,\n  searchUserPostSuccess,\n  searchUserPostFailure,\n} from \"../actions/OtherUserAction\";\nimport {\n  FETCH_SINGLE_USER_POSTS_START,\n  FETCH_SINGLE_USER_PROFILE_START,\n  SEARCH_USER_POST_START,\n} from \"../actions/ActionConstant\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchOtherUserProfileAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.otherUser.userDetails.inputData\n    );\n    if (inputData.user_unique_id == localStorage.getItem(\"user_unique_id\")) {\n      window.location.assign(\"/profile\");\n    }\n    const response = yield api.postMethod(\"other_profile\", inputData);\n    if (response.data.success) {\n      yield put(fetchSingleUserProfileSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleUserProfileFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/home\");\n    }\n  } catch (error) {\n    yield put(fetchSingleUserProfileFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchOtherUserPostAPI(action) {\n  try {\n    const response = yield api.postMethod(\"other_profile_posts\", action.data);\n    if (response.data.success) {\n      yield put(fetchSingleUserPostsSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleUserPostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleUserPostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* searchPostAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.otherUser.searchPosts.inputData\n    );\n    const response = yield api.postMethod(\"posts_search\", inputData);\n    if (response.data.success) {\n      yield put(fetchSingleUserPostsSuccess(response.data.data));\n    } else {\n      yield put(searchUserPostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(searchUserPostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(FETCH_SINGLE_USER_PROFILE_START, fetchOtherUserProfileAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_SINGLE_USER_POSTS_START, fetchOtherUserPostAPI),\n  ]);\n\n  yield all([yield takeLatest(SEARCH_USER_POST_START, searchPostAPI)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}