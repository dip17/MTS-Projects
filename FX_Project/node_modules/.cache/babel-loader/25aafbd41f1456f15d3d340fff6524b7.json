{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_WALLET_DETAILS_START, ADD_MONEY_VIA_BANK_START, ADD_MONEY_VIA_CARD_START, ADD_MONEY_VIA_PAYPAL_START, GENERATE_STRIPE_PAYMENT_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchWalletDetailsSuccess, fetchWalletDetailsFailure, addMoneyViaCardSuccess, addMoneyViaCardFailure, addMoneyViaBankSuccess, addMoneyViaBankFailure, addMoneyViaPaypalSuccess, addMoneyViaPaypalFailure, generateStripePaymentSuccess, generateStripePaymentFailure } from \"../actions/WalletAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nfunction* fetchWalletDetailsAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_index\");\n    if (response.data.success) {\n      yield put(fetchWalletDetailsSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchWalletDetailsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchWalletDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* addMoneyViaCardAPI() {\n  try {\n    const inputData = yield select(state => state.wallet.addMoneyInput.data);\n    const response = yield api.postMethod(\"wallets_add_money_by_stripe\", inputData);\n    if (response.data.success) {\n      yield put(addMoneyViaCardSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(addMoneyViaCardFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addMoneyViaCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* addMoneyViaBankAPI() {\n  try {\n    const inputData = yield select(state => state.wallet.addMoneyInput.data);\n    const response = yield api.postMethod(\"wallets_add_money_by_bank_account\", inputData);\n    if (response.data.success) {\n      yield put(addMoneyViaBankSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/wallet\");\n    } else {\n      yield put(addMoneyViaBankFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addMoneyViaBankFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* addMoneyViaPaypalAPI() {\n  try {\n    const inputData = yield select(state => state.wallet.addMoneyInput.data);\n    const response = yield api.postMethod(\"wallets_add_money_by_paypal\", inputData);\n    if (response.data.success) {\n      yield put(addMoneyViaPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/wallet\");\n    } else {\n      yield put(addMoneyViaPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addMoneyViaPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* generateStripePaymentAPI(action) {\n  try {\n    const response = yield api.postMethod(\"wallets_generate_stripe_payment\", action.data);\n    if (response.data.success) {\n      yield put(generateStripePaymentSuccess(response.data.data));\n    } else {\n      yield put(generateStripePaymentFailure(response.data.error));\n      yield put(createNotification(getErrorNotificationMessage(response.data.error)));\n    }\n  } catch (error) {\n    yield put(generateStripePaymentFailure(error));\n    yield put(createNotification(getErrorNotificationMessage(error.response.data.error)));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_WALLET_DETAILS_START, fetchWalletDetailsAPI), yield takeLatest(ADD_MONEY_VIA_BANK_START, addMoneyViaBankAPI), yield takeLatest(ADD_MONEY_VIA_CARD_START, addMoneyViaCardAPI), yield takeLatest(ADD_MONEY_VIA_PAYPAL_START, addMoneyViaPaypalAPI), yield takeLatest(GENERATE_STRIPE_PAYMENT_START, generateStripePaymentAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","FETCH_WALLET_DETAILS_START","ADD_MONEY_VIA_BANK_START","ADD_MONEY_VIA_CARD_START","ADD_MONEY_VIA_PAYPAL_START","GENERATE_STRIPE_PAYMENT_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchWalletDetailsSuccess","fetchWalletDetailsFailure","addMoneyViaCardSuccess","addMoneyViaCardFailure","addMoneyViaBankSuccess","addMoneyViaBankFailure","addMoneyViaPaypalSuccess","addMoneyViaPaypalFailure","generateStripePaymentSuccess","generateStripePaymentFailure","checkLogoutStatus","fetchWalletDetailsAPI","response","postMethod","data","success","error","notificationMessage","addMoneyViaCardAPI","inputData","state","wallet","addMoneyInput","message","addMoneyViaBankAPI","window","location","assign","addMoneyViaPaypalAPI","generateStripePaymentAPI","action","pageSaga"],"sources":["/home/mts/FX-Project/src/store/sagas/WalletSaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\n\nimport api from \"../../Environment\";\nimport {\n  FETCH_WALLET_DETAILS_START,\n  ADD_MONEY_VIA_BANK_START,\n  ADD_MONEY_VIA_CARD_START,\n  ADD_MONEY_VIA_PAYPAL_START,\n  GENERATE_STRIPE_PAYMENT_START,\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\n\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchWalletDetailsSuccess,\n  fetchWalletDetailsFailure,\n  addMoneyViaCardSuccess,\n  addMoneyViaCardFailure,\n  addMoneyViaBankSuccess,\n  addMoneyViaBankFailure,\n  addMoneyViaPaypalSuccess,\n  addMoneyViaPaypalFailure,\n  generateStripePaymentSuccess,\n  generateStripePaymentFailure,\n} from \"../actions/WalletAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchWalletDetailsAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_index\");\n    if (response.data.success) {\n      yield put(fetchWalletDetailsSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchWalletDetailsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchWalletDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* addMoneyViaCardAPI() {\n  try {\n    const inputData = yield select((state) => state.wallet.addMoneyInput.data);\n    const response = yield api.postMethod(\n      \"wallets_add_money_by_stripe\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(addMoneyViaCardSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(addMoneyViaCardFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addMoneyViaCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* addMoneyViaBankAPI() {\n  try {\n    const inputData = yield select((state) => state.wallet.addMoneyInput.data);\n    const response = yield api.postMethod(\n      \"wallets_add_money_by_bank_account\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(addMoneyViaBankSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/wallet\");\n    } else {\n      yield put(addMoneyViaBankFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addMoneyViaBankFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* addMoneyViaPaypalAPI() {\n  try {\n    const inputData = yield select((state) => state.wallet.addMoneyInput.data);\n    const response = yield api.postMethod(\n      \"wallets_add_money_by_paypal\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(addMoneyViaPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/wallet\");\n    } else {\n      yield put(addMoneyViaPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addMoneyViaPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* generateStripePaymentAPI(action) {\n  try {\n    const response = yield api.postMethod(\"wallets_generate_stripe_payment\", action.data);\n    if (response.data.success) {\n      yield put(generateStripePaymentSuccess(response.data.data));\n    } else {\n      yield put(generateStripePaymentFailure(response.data.error));\n      yield put(createNotification(getErrorNotificationMessage(response.data.error)));\n    }\n  } catch (error) {\n    yield put(generateStripePaymentFailure(error));\n    yield put(createNotification(getErrorNotificationMessage(error.response.data.error)));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(FETCH_WALLET_DETAILS_START, fetchWalletDetailsAPI),\n    yield takeLatest(ADD_MONEY_VIA_BANK_START, addMoneyViaBankAPI),\n    yield takeLatest(ADD_MONEY_VIA_CARD_START, addMoneyViaCardAPI),\n    yield takeLatest(ADD_MONEY_VIA_PAYPAL_START, addMoneyViaPaypalAPI),\n    yield takeLatest(GENERATE_STRIPE_PAYMENT_START, generateStripePaymentAPI),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}