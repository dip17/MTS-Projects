{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = flattenToLodashFormat;\nvar OBJECT_DELIMITERS = \".\";\nvar ARRAY_START_DELIMITER = \"[\";\nvar ARRAY_END_DELIMITER = \"]\";\nfunction flattenToLodashFormat(target) {\n  var output = {};\n  function step(value) {\n    var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var type = Object.prototype.toString.call(value);\n    var isObject = type === \"[object Object]\" || type === \"[object Array]\";\n    var isArray = Array.isArray(value);\n    if (!isArray && isObject) {\n      Object.keys(value).forEach(function (key) {\n        var newKey = prev ? prev + OBJECT_DELIMITERS + key : key;\n        step(value[key], newKey);\n      });\n    } else if (isArray) {\n      value.forEach(function (arrayValue, index) {\n        var arrayKey = prev + ARRAY_START_DELIMITER + index + ARRAY_END_DELIMITER;\n        step(arrayValue, arrayKey);\n      });\n    } else {\n      output[prev] = value;\n    }\n  }\n  step(target);\n  return output;\n}","map":{"version":3,"sources":["../src/flattenToLodashFormat.ts"],"names":["OBJECT_DELIMITERS","ARRAY_START_DELIMITER","ARRAY_END_DELIMITER","flattenToLodashFormat","target","output","step","value","prev","type","Object","prototype","toString","call","isObject","isArray","Array","keys","forEach","key","newKey","arrayValue","index","arrayKey"],"mappings":";;;;;;AAAA,IAAMA,iBAAiB,GAAG,GAA1B;AACA,IAAMC,qBAAqB,GAAG,GAA9B;AACA,IAAMC,mBAAmB,GAAG,GAA5B;AAEe,SAASC,qBAAT,CAA+BC,MAA/B,EAA+C;EAC5D,IAAMC,MAAM,GAAG,CAAA,CAAf;EAEA,SAASC,IAAT,CAAcC,KAAd,EAAqC;IAAA,IAAXC,IAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;IACnC,IAAMC,IAAI,GAAGC,MAAM,CAACC,SAAPD,CAAiBE,QAAjBF,CAA0BG,IAA1BH,CAA+BH,KAA/BG,CAAb;IACA,IAAMI,QAAQ,GAAGL,IAAI,KAAK,iBAATA,IAA8BA,IAAI,KAAK,gBAAxD;IACA,IAAMM,OAAO,GAAGC,KAAK,CAACD,OAANC,CAAcT,KAAdS,CAAhB;IAEA,IAAI,CAACD,OAAD,IAAYD,QAAhB,EAA0B;MACxBJ,MAAM,CAACO,IAAPP,CAAYH,KAAZG,CAAAA,CAAmBQ,OAAnBR,CAA2B,UAAUS,GAAV,EAAuB;QAChD,IAAIC,MAAM,GAAGZ,IAAI,GAAGA,IAAI,GAAGR,iBAAPQ,GAA2BW,GAA9B,GAAoCA,GAArD;QAEAb,IAAI,CAACC,KAAK,CAACY,GAAD,CAAN,EAAaC,MAAb,CAAJd;MACD,CAJDI,CAAAA;IAKD,CAND,MAMO,IAAIK,OAAJ,EAAa;MAClBR,KAAK,CAACW,OAANX,CAAc,UAACc,UAAD,EAAkBC,KAAlB,EAAoC;QAChD,IAAMC,QAAQ,GACZf,IAAI,GAAGP,qBAAPO,GAA+Bc,KAA/Bd,GAAuCN,mBADzC;QAGAI,IAAI,CAACe,UAAD,EAAaE,QAAb,CAAJjB;MACD,CALDC,CAAAA;IAMD,CAPM,MAOA;MACLF,MAAM,CAACG,IAAD,CAANH,GAAeE,KAAfF;IACD;EACF;EAEDC,IAAI,CAACF,MAAD,CAAJE;EAEA,OAAOD,MAAP;AACD","sourcesContent":["const OBJECT_DELIMITERS = \".\";\nconst ARRAY_START_DELIMITER = \"[\";\nconst ARRAY_END_DELIMITER = \"]\";\n\nexport default function flattenToLodashFormat(target: {}): {} {\n  const output = {} as { [key: string]: string };\n\n  function step(value: any, prev = \"\") {\n    const type = Object.prototype.toString.call(value);\n    const isObject = type === \"[object Object]\" || type === \"[object Array]\";\n    const isArray = Array.isArray(value);\n\n    if (!isArray && isObject) {\n      Object.keys(value).forEach(function (key: string) {\n        let newKey = prev ? prev + OBJECT_DELIMITERS + key : key;\n\n        step(value[key], newKey);\n      });\n    } else if (isArray) {\n      value.forEach((arrayValue: any, index: number) => {\n        const arrayKey =\n          prev + ARRAY_START_DELIMITER + index + ARRAY_END_DELIMITER;\n\n        step(arrayValue, arrayKey);\n      });\n    } else {\n      output[prev] = value;\n    }\n  }\n\n  step(target);\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"script"}