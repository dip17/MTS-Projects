{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_USER_CATEGORY_LIST_START, FETCH_CONTENT_CREATOR_LIST_START, FETCH_CATEGORY_LISTING_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchUserCategoryListSuccess, fetchUserCategoryListFailure, fetchContentCreatorListSuccess, fetchContentCreatorListFailure, fetchCategoryListingSuccess, fetchCategoryListingFailure } from \"../actions/UserCategoryAction\";\nfunction* fetchUserCategoryListAPI() {\n  try {\n    const response = yield api.postMethod(\"categories_list\");\n    if (response.data.success) {\n      yield put(fetchUserCategoryListSuccess(response.data));\n    } else {\n      yield put(fetchUserCategoryListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserCategoryListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchContentCreatorListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"content_creators_list\", action.data);\n    if (response.data.success) {\n      yield put(fetchContentCreatorListSuccess(response.data));\n    } else {\n      yield put(fetchContentCreatorListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchContentCreatorListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchCategoryListingAPI(action) {\n  try {\n    const response = yield api.postMethod(\"category_listing\", action.data);\n    if (response.data.success) {\n      yield put(fetchCategoryListingSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoryListingFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoryListingFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_USER_CATEGORY_LIST_START, fetchUserCategoryListAPI)]);\n  yield all([yield takeLatest(FETCH_CONTENT_CREATOR_LIST_START, fetchContentCreatorListAPI)]);\n  yield all([yield takeLatest(FETCH_CATEGORY_LISTING_START, fetchCategoryListingAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","FETCH_USER_CATEGORY_LIST_START","FETCH_CONTENT_CREATOR_LIST_START","FETCH_CATEGORY_LISTING_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchUserCategoryListSuccess","fetchUserCategoryListFailure","fetchContentCreatorListSuccess","fetchContentCreatorListFailure","fetchCategoryListingSuccess","fetchCategoryListingFailure","fetchUserCategoryListAPI","response","postMethod","data","success","error","notificationMessage","message","fetchContentCreatorListAPI","action","fetchCategoryListingAPI","pageSaga"],"sources":["/home/mts/FX-Project/src/store/sagas/UserCategorySaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\n\nimport {\n  FETCH_USER_CATEGORY_LIST_START,\n  FETCH_CONTENT_CREATOR_LIST_START,\n  FETCH_CATEGORY_LISTING_START\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nimport {\n  fetchUserCategoryListSuccess,\n  fetchUserCategoryListFailure,\n  fetchContentCreatorListSuccess,\n  fetchContentCreatorListFailure,\n  fetchCategoryListingSuccess,\n  fetchCategoryListingFailure\n} from \"../actions/UserCategoryAction\";\n\n\nfunction* fetchUserCategoryListAPI() {\n  try {\n    const response = yield api.postMethod(\"categories_list\");\n\n    if (response.data.success) {\n      yield put(fetchUserCategoryListSuccess(response.data));\n    } else {\n      yield put(fetchUserCategoryListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserCategoryListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchContentCreatorListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"content_creators_list\" , action.data);\n\n    if (response.data.success) {\n      yield put(fetchContentCreatorListSuccess(response.data));\n    } else {\n      yield put(fetchContentCreatorListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchContentCreatorListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchCategoryListingAPI(action) {\n  try {\n    const response = yield api.postMethod(\"category_listing\" , action.data);\n\n    if (response.data.success) {\n      yield put(fetchCategoryListingSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoryListingFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoryListingFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_USER_CATEGORY_LIST_START, fetchUserCategoryListAPI)]);\n  yield all([yield takeLatest(FETCH_CONTENT_CREATOR_LIST_START, fetchContentCreatorListAPI)]);\n  yield all([yield takeLatest(FETCH_CATEGORY_LISTING_START, fetchCategoryListingAPI)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}