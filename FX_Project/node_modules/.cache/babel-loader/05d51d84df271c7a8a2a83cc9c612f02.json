{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { CHAT_ASSET_FILES_UPLOAD_START, FETCH_CHAT_ASSETS_START, FETCH_CHAT_MESSAGES_START, FETCH_CHAT_USERS_START, FETCH_MORE_CHAT_MESSAGES_START, FETCH_MORE_CHAT_USERS_START, FETCH_MORE_USER_CHAT_ASSETS_START, FETCH_USER_CHAT_ASSETS_START, SAVE_CHAT_USERS_START } from \"../actions/ActionConstant\";\nimport { chatAssetFilesUploadFailure, chatAssetFilesUploadSuccess, chatUser, fetchChatMessagesFailure, fetchCHatMessagesSuccess, fetchChatUsersFailure, fetchChatUsersSuccess, fetchUserChatAssetsFailure, fetchUserChatAssetsSuccess, saveChatUserFailure, saveChatUserSuccess } from \"../actions/ChatAction\";\nimport { createNotification } from \"react-redux-notify\";\nfunction* fetchChatUserAPI(action) {\n  try {\n    const response = yield api.postMethod(\"chat_users\", action.data);\n    if (response.data.success) {\n      yield put(fetchChatUsersSuccess(response.data.data));\n      // if (response.data.data.users.length > 0 && inputData.search_key == '')\n      //   yield put(\n      //     fetchChatMessageStart({\n      //       to_user_id: response.data.data.users[0].to_user_id,\n      //       from_user_id: response.data.data.users[0].from_user_id,\n      //     })\n      //   );\n    } else {\n      yield put(fetchChatUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchChatUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchChatAssetsAPI(action) {\n  try {\n    const response = yield api.postMethod(\"user_chat_assets\", action.data);\n    if (response.data.success) {\n      yield put(fetchUserChatAssetsSuccess(response.data.data));\n    } else {\n      yield put(fetchUserChatAssetsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserChatAssetsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchChatMessagesAPI(action) {\n  try {\n    const response = yield api.postMethod(\"chat_messages_index\", {\n      ...action.data,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    });\n    if (response.data.success) {\n      yield put(fetchCHatMessagesSuccess(response.data.data));\n    } else {\n      yield put(fetchChatMessagesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchChatMessagesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* saveChatUserAPI(action) {\n  try {\n    const response = yield api.postMethod(\"chat_users_save\", action.data);\n    if (response.data.success) {\n      yield put(saveChatUserSuccess(response.data.data));\n      yield put(chatUser(response.data.data.to_user));\n    } else {\n      yield put(saveChatUserFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveChatUserFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* chatAssetFilesUploadAPI(action) {\n  try {\n    const response = yield api.postMethod(\"chat_asset_files_upload\", action.data);\n    if (response.data.success) {\n      yield put(chatAssetFilesUploadSuccess(response.data.data));\n    } else {\n      yield put(chatAssetFilesUploadFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(chatAssetFilesUploadFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* ChatSaga() {\n  yield all([yield takeLatest(FETCH_CHAT_USERS_START, fetchChatUserAPI), yield takeLatest(FETCH_MORE_CHAT_USERS_START, fetchChatUserAPI), yield takeLatest(FETCH_USER_CHAT_ASSETS_START, fetchChatAssetsAPI), yield takeLatest(FETCH_MORE_USER_CHAT_ASSETS_START, fetchChatAssetsAPI), yield takeLatest(FETCH_CHAT_MESSAGES_START, fetchChatMessagesAPI), yield takeLatest(FETCH_MORE_CHAT_MESSAGES_START, fetchChatMessagesAPI), yield takeLatest(SAVE_CHAT_USERS_START, saveChatUserAPI), yield takeLatest(CHAT_ASSET_FILES_UPLOAD_START, chatAssetFilesUploadAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","getSuccessNotificationMessage","getErrorNotificationMessage","CHAT_ASSET_FILES_UPLOAD_START","FETCH_CHAT_ASSETS_START","FETCH_CHAT_MESSAGES_START","FETCH_CHAT_USERS_START","FETCH_MORE_CHAT_MESSAGES_START","FETCH_MORE_CHAT_USERS_START","FETCH_MORE_USER_CHAT_ASSETS_START","FETCH_USER_CHAT_ASSETS_START","SAVE_CHAT_USERS_START","chatAssetFilesUploadFailure","chatAssetFilesUploadSuccess","chatUser","fetchChatMessagesFailure","fetchCHatMessagesSuccess","fetchChatUsersFailure","fetchChatUsersSuccess","fetchUserChatAssetsFailure","fetchUserChatAssetsSuccess","saveChatUserFailure","saveChatUserSuccess","createNotification","fetchChatUserAPI","action","response","postMethod","data","success","error","notificationMessage","message","fetchChatAssetsAPI","fetchChatMessagesAPI","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","saveChatUserAPI","to_user","chatAssetFilesUploadAPI","ChatSaga"],"sources":["/home/mts/FX-Project/src/store/sagas/ChatSaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  CHAT_ASSET_FILES_UPLOAD_START,\n  FETCH_CHAT_ASSETS_START,\n  FETCH_CHAT_MESSAGES_START,\n  FETCH_CHAT_USERS_START,\n  FETCH_MORE_CHAT_MESSAGES_START,\n  FETCH_MORE_CHAT_USERS_START,\n  FETCH_MORE_USER_CHAT_ASSETS_START,\n  FETCH_USER_CHAT_ASSETS_START,\n  SAVE_CHAT_USERS_START\n} from \"../actions/ActionConstant\";\nimport {\n  chatAssetFilesUploadFailure,\n  chatAssetFilesUploadSuccess,\n  chatUser,\n  fetchChatMessagesFailure,\n  fetchCHatMessagesSuccess,\n  fetchChatUsersFailure,\n  fetchChatUsersSuccess,\n  fetchUserChatAssetsFailure,\n  fetchUserChatAssetsSuccess,\n  saveChatUserFailure,\n  saveChatUserSuccess\n} from \"../actions/ChatAction\";\nimport { createNotification } from \"react-redux-notify\";\n\nfunction* fetchChatUserAPI(action) {\n  try {\n    const response = yield api.postMethod(\"chat_users\", action.data);\n    if (response.data.success) {\n      yield put(fetchChatUsersSuccess(response.data.data));\n      // if (response.data.data.users.length > 0 && inputData.search_key == '')\n      //   yield put(\n      //     fetchChatMessageStart({\n      //       to_user_id: response.data.data.users[0].to_user_id,\n      //       from_user_id: response.data.data.users[0].from_user_id,\n      //     })\n      //   );\n    } else {\n      yield put(fetchChatUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchChatUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchChatAssetsAPI(action) {\n  try {\n    const response = yield api.postMethod(\"user_chat_assets\", action.data);\n    if (response.data.success) {\n      yield put(fetchUserChatAssetsSuccess(response.data.data));\n    } else {\n      yield put(fetchUserChatAssetsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserChatAssetsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchChatMessagesAPI(action) {\n  try {\n    const response = yield api.postMethod(\"chat_messages_index\", {\n      ...action.data,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    });\n    if (response.data.success) {\n      yield put(fetchCHatMessagesSuccess(response.data.data));\n    } else {\n      yield put(fetchChatMessagesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchChatMessagesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveChatUserAPI(action) {\n  try {\n    const response = yield api.postMethod(\"chat_users_save\", action.data);\n    if (response.data.success) {\n      yield put(saveChatUserSuccess(response.data.data));\n      yield put(chatUser(response.data.data.to_user));\n    } else {\n      yield put(saveChatUserFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveChatUserFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* chatAssetFilesUploadAPI(action) {\n  try {\n    const response = yield api.postMethod(\"chat_asset_files_upload\", action.data);\n    if (response.data.success) {\n      yield put(chatAssetFilesUploadSuccess(response.data.data));\n    } else {\n      yield put(chatAssetFilesUploadFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(chatAssetFilesUploadFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* ChatSaga() {\n  yield all([\n    yield takeLatest(FETCH_CHAT_USERS_START, fetchChatUserAPI),\n    yield takeLatest(FETCH_MORE_CHAT_USERS_START, fetchChatUserAPI),\n    yield takeLatest(FETCH_USER_CHAT_ASSETS_START, fetchChatAssetsAPI),\n    yield takeLatest(FETCH_MORE_USER_CHAT_ASSETS_START, fetchChatAssetsAPI),\n    yield takeLatest(FETCH_CHAT_MESSAGES_START, fetchChatMessagesAPI),\n    yield takeLatest(FETCH_MORE_CHAT_MESSAGES_START, fetchChatMessagesAPI),\n    yield takeLatest(SAVE_CHAT_USERS_START, saveChatUserAPI),\n    yield takeLatest(CHAT_ASSET_FILES_UPLOAD_START, chatAssetFilesUploadAPI),\n  ]);\n}"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,EAAEC,GAAG,EAAEC,UAAU,EAAEC,GAAG,QAAQ,oBAAoB;AACvE,OAAOC,GAAG,MAAM,mBAAmB;AACnC,SACEC,6BAA6B,EAC7BC,2BAA2B,QACtB,6CAA6C;AACpD,SACEC,6BAA6B,EAC7BC,uBAAuB,EACvBC,yBAAyB,EACzBC,sBAAsB,EACtBC,8BAA8B,EAC9BC,2BAA2B,EAC3BC,iCAAiC,EACjCC,4BAA4B,EAC5BC,qBAAqB,QAChB,2BAA2B;AAClC,SACEC,2BAA2B,EAC3BC,2BAA2B,EAC3BC,QAAQ,EACRC,wBAAwB,EACxBC,wBAAwB,EACxBC,qBAAqB,EACrBC,qBAAqB,EACrBC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,mBAAmB,EACnBC,mBAAmB,QACd,uBAAuB;AAC9B,SAASC,kBAAkB,QAAQ,oBAAoB;AAEvD,UAAUC,gBAAgBA,CAACC,MAAM,EAAE;EACjC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAU,CAAC,YAAY,EAAEF,MAAM,CAACG,IAAI,CAAC;IAChE,IAAIF,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MACzB,MAAMhC,GAAG,CAACqB,qBAAqB,CAACQ,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;MACpD;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,MAAM;MACL,MAAM/B,GAAG,CAACoB,qBAAqB,CAACS,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC,CAAC;MACrD,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAACwB,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC;MAC5E,MAAMjC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;IACpD;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMjC,GAAG,CAACoB,qBAAqB,CAACa,KAAK,CAAC,CAAC;IACvC,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAAC4B,KAAK,CAACE,OAAO,CAAC;IACtE,MAAMnC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;EACpD;AACF;AAEA,UAAUE,kBAAkBA,CAACR,MAAM,EAAE;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAU,CAAC,kBAAkB,EAAEF,MAAM,CAACG,IAAI,CAAC;IACtE,IAAIF,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MACzB,MAAMhC,GAAG,CAACuB,0BAA0B,CAACM,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;IAC3D,CAAC,MAAM;MACL,MAAM/B,GAAG,CAACsB,0BAA0B,CAACO,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC,CAAC;MAC1D,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAACwB,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC;MAC5E,MAAMjC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;IACpD;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMjC,GAAG,CAACsB,0BAA0B,CAACW,KAAK,CAAC,CAAC;IAC5C,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAAC4B,KAAK,CAACE,OAAO,CAAC;IACtE,MAAMnC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;EACpD;AACF;AAEA,UAAUG,oBAAoBA,CAACT,MAAM,EAAE;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAU,CAAC,qBAAqB,EAAE;MAC3D,GAAGF,MAAM,CAACG,IAAI;MACdO,QAAQ,EAAEC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACC;IACpD,CAAC,CAAC;IACF,IAAIb,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MACzB,MAAMhC,GAAG,CAACmB,wBAAwB,CAACU,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;IACzD,CAAC,MAAM;MACL,MAAM/B,GAAG,CAACkB,wBAAwB,CAACW,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC,CAAC;MACxD,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAACwB,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC;MAC5E,MAAMjC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;IACpD;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMjC,GAAG,CAACkB,wBAAwB,CAACe,KAAK,CAAC,CAAC;IAC1C,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAAC4B,KAAK,CAACE,OAAO,CAAC;IACtE,MAAMnC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;EACpD;AACF;AAEA,UAAUS,eAAeA,CAACf,MAAM,EAAE;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAU,CAAC,iBAAiB,EAAEF,MAAM,CAACG,IAAI,CAAC;IACrE,IAAIF,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MACzB,MAAMhC,GAAG,CAACyB,mBAAmB,CAACI,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;MAClD,MAAM/B,GAAG,CAACiB,QAAQ,CAACY,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACa,OAAO,CAAC,CAAC;IACjD,CAAC,MAAM;MACL,MAAM5C,GAAG,CAACwB,mBAAmB,CAACK,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC,CAAC;MACnD,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAACwB,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC;MAC5E,MAAMjC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;IACpD;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMjC,GAAG,CAACwB,mBAAmB,CAACS,KAAK,CAAC,CAAC;IACrC,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAAC4B,KAAK,CAACE,OAAO,CAAC;IACtE,MAAMnC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;EACpD;AACF;AAEA,UAAUW,uBAAuBA,CAACjB,MAAM,EAAE;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAU,CAAC,yBAAyB,EAAEF,MAAM,CAACG,IAAI,CAAC;IAC7E,IAAIF,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MACzB,MAAMhC,GAAG,CAACgB,2BAA2B,CAACa,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;IAC5D,CAAC,MAAM;MACL,MAAM/B,GAAG,CAACe,2BAA2B,CAACc,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC,CAAC;MAC3D,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAACwB,QAAQ,CAACE,IAAI,CAACE,KAAK,CAAC;MAC5E,MAAMjC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;IACpD;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd,MAAMjC,GAAG,CAACe,2BAA2B,CAACkB,KAAK,CAAC,CAAC;IAC7C,MAAMC,mBAAmB,GAAG7B,2BAA2B,CAAC4B,KAAK,CAACE,OAAO,CAAC;IACtE,MAAMnC,GAAG,CAAC0B,kBAAkB,CAACQ,mBAAmB,CAAC,CAAC;EACpD;AACF;AAEA,eAAe,UAAUY,QAAQA,CAAA,EAAG;EAClC,MAAM5C,GAAG,CAAC,CACR,MAAMD,UAAU,CAACQ,sBAAsB,EAAEkB,gBAAgB,CAAC,EAC1D,MAAM1B,UAAU,CAACU,2BAA2B,EAAEgB,gBAAgB,CAAC,EAC/D,MAAM1B,UAAU,CAACY,4BAA4B,EAAEuB,kBAAkB,CAAC,EAClE,MAAMnC,UAAU,CAACW,iCAAiC,EAAEwB,kBAAkB,CAAC,EACvE,MAAMnC,UAAU,CAACO,yBAAyB,EAAE6B,oBAAoB,CAAC,EACjE,MAAMpC,UAAU,CAACS,8BAA8B,EAAE2B,oBAAoB,CAAC,EACtE,MAAMpC,UAAU,CAACa,qBAAqB,EAAE6B,eAAe,CAAC,EACxD,MAAM1C,UAAU,CAACK,6BAA6B,EAAEuC,uBAAuB,CAAC,CACzE,CAAC;AACJ"},"metadata":{},"sourceType":"module"}