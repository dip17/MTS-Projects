{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport AgoraRTC from \"agora-rtc-sdk-ng\";\nimport { createNotification } from \"react-redux-notify\";\nimport { useDispatch } from \"react-redux\";\nimport { getErrorNotificationMessage } from \"../components/helper/NotificationMessage\";\nconst useAgoraRTC = client => {\n  const dispatch = useDispatch();\n  const [localVideoTrack, setLocalVideoTrack] = useState(undefined);\n  const [localAudioTrack, setLocalAudioTrack] = useState(undefined);\n  const [joinState, setJoinState] = useState(false);\n  const [remoteUsers, setRemoteUsers] = useState([]);\n  const [isStreamEnded, setIsStreamEnded] = useState(false);\n  const [mediaStatus, setMediaStatus] = useState({\n    audio: {\n      muted: false\n    },\n    video: {\n      muted: false,\n      fullScreen: false\n    },\n    permissionDenied: null\n  });\n  const createLocalTracks = async (audioConfig, videoConfig) => {\n    const [microphoneTrack, cameraTrack] = await AgoraRTC.createMicrophoneAndCameraTracks(audioConfig, videoConfig);\n    setLocalAudioTrack(microphoneTrack);\n    setLocalVideoTrack(cameraTrack);\n    return [microphoneTrack, cameraTrack];\n  };\n  const createAudioTrack = async audioConfig => {\n    const microphoneTrack = await AgoraRTC.createMicrophoneAudioTrack(audioConfig);\n    setLocalAudioTrack(microphoneTrack);\n    return microphoneTrack;\n  };\n  const unPublishLocalTracks = async () => {\n    const [microphoneTrack, cameraTrack] = await createLocalTracks();\n    await client.unpublish([microphoneTrack, cameraTrack]);\n  };\n  const join = async (appid, channel, token, role, mode) => {\n    if (!client || !role) return;\n    if (mode === \"live\") {\n      if (role === \"audience\") {\n        client.setClientRole(role);\n      } else {\n        client.setClientRole(role);\n      }\n      await client.join(appid, channel, token || null).catch(e => {\n        leaveRtcChannel();\n      });\n      if (role === \"host\") {\n        await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: true\n        }).then(async res => {\n          const [microphoneTrack, cameraTrack] = await createLocalTracks();\n          cameraTrack.play(\"agora_local\", {\n            fit: \"cover\",\n            mirror: true\n          });\n          await client.publish([microphoneTrack, cameraTrack]);\n          window.client = client;\n          window.videoTrack = cameraTrack;\n        }).catch(e => {\n          console.log(\"denied\", e);\n          setMediaStatus(prev => {\n            return {\n              ...prev,\n              permissionDenied: true\n            };\n          });\n          const notificationMessage = getErrorNotificationMessage(e.message);\n          dispatch(createNotification(notificationMessage));\n        });\n      }\n      setJoinState(true);\n      setMediaStatus(prev => {\n        return {\n          ...prev,\n          permissionDenied: false\n        };\n      });\n    } else {\n      await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(async res => {\n        await client.join(appid, channel, token || null).catch(e => {\n          leaveRtcChannel();\n        });\n        const [microphoneTrack, cameraTrack] = await createLocalTracks();\n        await client.publish([microphoneTrack, cameraTrack]);\n        window.client = client;\n        window.videoTrack = cameraTrack;\n        setJoinState(true);\n        setMediaStatus(prev => {\n          return {\n            ...prev,\n            permissionDenied: false\n          };\n        });\n      }).catch(e => {\n        console.log(\"denied\", e);\n        setMediaStatus(prev => {\n          return {\n            ...prev,\n            permissionDenied: true\n          };\n        });\n        const notificationMessage = getErrorNotificationMessage(e.message);\n        dispatch(createNotification(notificationMessage));\n      });\n    }\n\n    // await navigator.mediaDevices\n    //   .getUserMedia({ audio: true, video: true })\n    //   .then(async (res) => {\n    //     if (mode === \"live\") {\n    //       if (role === \"audience\") {\n    //         client.setClientRole(role);\n    //       } else {\n    //         client.setClientRole(role);\n    //       }\n\n    //       await client.join(appid, channel, token || null);\n\n    //       if (role === \"host\") {\n    //         const [microphoneTrack, cameraTrack] = await createLocalTracks();\n    //         cameraTrack.play(\"agora_local\", { fit: \"cover\", mirror: true });\n    //         await client.publish([microphoneTrack, cameraTrack]);\n    //         window.client = client;\n    //         window.videoTrack = cameraTrack;\n    //       }\n    //       setJoinState(true);\n    //       setMediaStatus((prev) => {\n    //         return {\n    //           ...prev,\n    //           permissionDenied: false,\n    //         };\n    //       });\n    //     } else {\n    //       await client.join(appid, channel, token || null);\n    //       const [microphoneTrack, cameraTrack] = await createLocalTracks();\n    //       await client.publish([microphoneTrack, cameraTrack]);\n    //       window.client = client;\n    //       window.videoTrack = cameraTrack;\n    //       setJoinState(true);\n    //       setMediaStatus((prev) => {\n    //         return {\n    //           ...prev,\n    //           permissionDenied: false,\n    //         };\n    //       });\n    //     }\n    //   })\n    //   .catch((e) => {\n    //     console.log(\"denied\", e);\n    //     setMediaStatus((prev) => {\n    //       return {\n    //         ...prev,\n    //         permissionDenied: true,\n    //       };\n    //     });\n    //     const notificationMessage = getErrorNotificationMessage(e.message);\n    //     dispatch(createNotification(notificationMessage));\n    //   });\n  };\n  const joinAudio = async (appid, channel, token) => {\n    if (!client) return;\n    await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    }).then(async res => {\n      await client.join(appid, channel, token || null).catch(e => {\n        leaveRtcChannel();\n      });\n      const microphoneTrack = await createAudioTrack();\n      await client.publish([microphoneTrack]);\n      window.client = client;\n      setJoinState(true);\n      setMediaStatus(prev => {\n        return {\n          ...prev,\n          permissionDenied: false\n        };\n      });\n    }).catch(e => {\n      console.log(\"denied\", e);\n      setMediaStatus(prev => {\n        return {\n          ...prev,\n          permissionDenied: true\n        };\n      });\n      const notificationMessage = getErrorNotificationMessage(e.message);\n      dispatch(createNotification(notificationMessage));\n    });\n  };\n  const unpublishTracks = async track => {\n    if (track) {\n      await client.unpublish(track);\n    } else {\n      await client.unpublish();\n    }\n  };\n  const leaveRtcChannel = async (isHost = true) => {\n    if (localAudioTrack) {\n      localAudioTrack.stop();\n      localAudioTrack.close();\n    }\n    if (localVideoTrack) {\n      localVideoTrack.stop();\n      localVideoTrack.close();\n    }\n    if (isHost) {\n      setRemoteUsers([]);\n      setJoinState(false);\n      await (client === null || client === void 0 ? void 0 : client.leave());\n      setIsStreamEnded(true);\n    } else {\n      await (client === null || client === void 0 ? void 0 : client.leave());\n    }\n  };\n  const muteAudio = async () => {\n    if (localAudioTrack) {\n      await localAudioTrack.setMuted(!localAudioTrack.muted);\n      setMediaStatus({\n        ...mediaStatus,\n        audio: {\n          ...mediaStatus.audio,\n          muted: localAudioTrack.muted\n        }\n      });\n    }\n  };\n  const muteVideo = async () => {\n    if (localVideoTrack) {\n      await localVideoTrack.setMuted(!localVideoTrack.muted);\n      setMediaStatus({\n        ...mediaStatus,\n        video: {\n          ...mediaStatus.video,\n          muted: localVideoTrack.muted\n        }\n      });\n    }\n  };\n  const toggleFullScreen = () => {\n    setMediaStatus(prevMediaStatus => {\n      if (prevMediaStatus.video.fullScreen) {\n        document.body.style.overflow = \"auto\";\n      } else {\n        document.body.style.overflow = \"hidden\";\n      }\n      return {\n        ...prevMediaStatus,\n        video: {\n          ...prevMediaStatus.video,\n          fullScreen: !prevMediaStatus.video.fullScreen\n        }\n      };\n    });\n  };\n  useEffect(() => {\n    if (!client) return;\n    setRemoteUsers(client.remoteUsers);\n    const handleUserPublished = async (user, mediaType) => {\n      // one to one logic here\n      await client.subscribe(user, mediaType);\n      // toggle rerender while state of remoteUsers changed.\n      setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));\n    };\n    const handleUserUnpublished = user => {\n      setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));\n    };\n    const handleUserJoined = user => {\n      setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));\n    };\n    const handleUserLeft = user => {\n      setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));\n    };\n    client.on(\"user-published\", handleUserPublished);\n    client.on(\"user-unpublished\", handleUserUnpublished);\n    client.on(\"user-joined\", handleUserJoined);\n    client.on(\"user-left\", handleUserLeft);\n    return () => {\n      client.off(\"user-published\", handleUserPublished);\n      client.off(\"user-unpublished\", handleUserUnpublished);\n      client.off(\"user-joined\", handleUserJoined);\n      client.off(\"user-left\", handleUserLeft);\n    };\n  }, [client]);\n  return {\n    localAudioTrack,\n    localVideoTrack,\n    joinState,\n    leaveRtcChannel,\n    join,\n    remoteUsers,\n    isStreamEnded,\n    muteAudio,\n    muteVideo,\n    mediaStatus,\n    toggleFullScreen,\n    unpublishTracks,\n    joinAudio,\n    unPublishLocalTracks\n  };\n};\nexport default useAgoraRTC;","map":{"version":3,"names":["React","useEffect","useState","AgoraRTC","createNotification","useDispatch","getErrorNotificationMessage","useAgoraRTC","client","dispatch","localVideoTrack","setLocalVideoTrack","undefined","localAudioTrack","setLocalAudioTrack","joinState","setJoinState","remoteUsers","setRemoteUsers","isStreamEnded","setIsStreamEnded","mediaStatus","setMediaStatus","audio","muted","video","fullScreen","permissionDenied","createLocalTracks","audioConfig","videoConfig","microphoneTrack","cameraTrack","createMicrophoneAndCameraTracks","createAudioTrack","createMicrophoneAudioTrack","unPublishLocalTracks","unpublish","join","appid","channel","token","role","mode","setClientRole","catch","e","leaveRtcChannel","navigator","mediaDevices","getUserMedia","then","res","play","fit","mirror","publish","window","videoTrack","console","log","prev","notificationMessage","message","joinAudio","unpublishTracks","track","isHost","stop","close","leave","muteAudio","setMuted","muteVideo","toggleFullScreen","prevMediaStatus","document","body","style","overflow","handleUserPublished","user","mediaType","subscribe","Array","from","handleUserUnpublished","handleUserJoined","handleUserLeft","on","off"],"sources":["/home/mts/Vishal/src/hooks/useAgoraRTC.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport AgoraRTC from \"agora-rtc-sdk-ng\";\nimport { createNotification } from \"react-redux-notify\";\nimport { useDispatch } from \"react-redux\";\nimport { getErrorNotificationMessage } from \"../components/helper/NotificationMessage\";\n\nconst useAgoraRTC = (client) => {\n  const dispatch = useDispatch();\n\n  const [localVideoTrack, setLocalVideoTrack] = useState(undefined);\n  const [localAudioTrack, setLocalAudioTrack] = useState(undefined);\n  const [joinState, setJoinState] = useState(false);\n  const [remoteUsers, setRemoteUsers] = useState([]);\n  const [isStreamEnded, setIsStreamEnded] = useState(false);\n  const [mediaStatus, setMediaStatus] = useState({\n    audio: {\n      muted: false,\n    },\n    video: {\n      muted: false,\n      fullScreen: false,\n    },\n    permissionDenied: null,\n  });\n\n  const createLocalTracks = async (audioConfig, videoConfig) => {\n    const [microphoneTrack, cameraTrack] =\n      await AgoraRTC.createMicrophoneAndCameraTracks(audioConfig, videoConfig);\n    setLocalAudioTrack(microphoneTrack);\n    setLocalVideoTrack(cameraTrack);\n    return [microphoneTrack, cameraTrack];\n  };\n\n  const createAudioTrack = async (audioConfig) => {\n    const microphoneTrack = await AgoraRTC.createMicrophoneAudioTrack(\n      audioConfig\n    );\n    setLocalAudioTrack(microphoneTrack);\n    return microphoneTrack;\n  };\n\n  const unPublishLocalTracks = async () => {\n    const [microphoneTrack, cameraTrack] = await createLocalTracks();\n    await client.unpublish([microphoneTrack, cameraTrack]);\n  };\n\n  const join = async (appid, channel, token, role, mode) => {\n    if (!client || !role) return;\n\n    if (mode === \"live\") {\n      if (role === \"audience\") {\n        client.setClientRole(role);\n      } else {\n        client.setClientRole(role);\n      }\n\n      await client.join(appid, channel, token || null).catch((e) => {\n        leaveRtcChannel();\n      });\n\n      if (role === \"host\") {\n        await navigator.mediaDevices\n          .getUserMedia({ audio: true, video: true })\n          .then(async (res) => {\n            const [microphoneTrack, cameraTrack] = await createLocalTracks();\n            cameraTrack.play(\"agora_local\", { fit: \"cover\", mirror: true });\n            await client.publish([microphoneTrack, cameraTrack]);\n            window.client = client;\n            window.videoTrack = cameraTrack;\n          })\n          .catch((e) => {\n            console.log(\"denied\", e);\n            setMediaStatus((prev) => {\n              return {\n                ...prev,\n                permissionDenied: true,\n              };\n            });\n            const notificationMessage = getErrorNotificationMessage(e.message);\n            dispatch(createNotification(notificationMessage));\n          });\n      }\n      setJoinState(true);\n      setMediaStatus((prev) => {\n        return {\n          ...prev,\n          permissionDenied: false,\n        };\n      });\n    } else {\n      await navigator.mediaDevices\n        .getUserMedia({ audio: true, video: true })\n        .then(async (res) => {\n          await client.join(appid, channel, token || null).catch((e) => {\n            leaveRtcChannel();\n          });\n          const [microphoneTrack, cameraTrack] = await createLocalTracks();\n          await client.publish([microphoneTrack, cameraTrack]);\n          window.client = client;\n          window.videoTrack = cameraTrack;\n          setJoinState(true);\n          setMediaStatus((prev) => {\n            return {\n              ...prev,\n              permissionDenied: false,\n            };\n          });\n        })\n        .catch((e) => {\n          console.log(\"denied\", e);\n          setMediaStatus((prev) => {\n            return {\n              ...prev,\n              permissionDenied: true,\n            };\n          });\n          const notificationMessage = getErrorNotificationMessage(e.message);\n          dispatch(createNotification(notificationMessage));\n        });\n    }\n\n    // await navigator.mediaDevices\n    //   .getUserMedia({ audio: true, video: true })\n    //   .then(async (res) => {\n    //     if (mode === \"live\") {\n    //       if (role === \"audience\") {\n    //         client.setClientRole(role);\n    //       } else {\n    //         client.setClientRole(role);\n    //       }\n\n    //       await client.join(appid, channel, token || null);\n\n    //       if (role === \"host\") {\n    //         const [microphoneTrack, cameraTrack] = await createLocalTracks();\n    //         cameraTrack.play(\"agora_local\", { fit: \"cover\", mirror: true });\n    //         await client.publish([microphoneTrack, cameraTrack]);\n    //         window.client = client;\n    //         window.videoTrack = cameraTrack;\n    //       }\n    //       setJoinState(true);\n    //       setMediaStatus((prev) => {\n    //         return {\n    //           ...prev,\n    //           permissionDenied: false,\n    //         };\n    //       });\n    //     } else {\n    //       await client.join(appid, channel, token || null);\n    //       const [microphoneTrack, cameraTrack] = await createLocalTracks();\n    //       await client.publish([microphoneTrack, cameraTrack]);\n    //       window.client = client;\n    //       window.videoTrack = cameraTrack;\n    //       setJoinState(true);\n    //       setMediaStatus((prev) => {\n    //         return {\n    //           ...prev,\n    //           permissionDenied: false,\n    //         };\n    //       });\n    //     }\n    //   })\n    //   .catch((e) => {\n    //     console.log(\"denied\", e);\n    //     setMediaStatus((prev) => {\n    //       return {\n    //         ...prev,\n    //         permissionDenied: true,\n    //       };\n    //     });\n    //     const notificationMessage = getErrorNotificationMessage(e.message);\n    //     dispatch(createNotification(notificationMessage));\n    //   });\n  };\n\n  const joinAudio = async (appid, channel, token) => {\n    if (!client) return;\n\n    await navigator.mediaDevices\n      .getUserMedia({ audio: true, video: false })\n      .then(async (res) => {\n        await client.join(appid, channel, token || null).catch((e) => {\n          leaveRtcChannel();\n        });\n        const microphoneTrack = await createAudioTrack();\n        await client.publish([microphoneTrack]);\n        window.client = client;\n        setJoinState(true);\n        setMediaStatus((prev) => {\n          return {\n            ...prev,\n            permissionDenied: false,\n          };\n        });\n      })\n      .catch((e) => {\n        console.log(\"denied\", e);\n        setMediaStatus((prev) => {\n          return {\n            ...prev,\n            permissionDenied: true,\n          };\n        });\n        const notificationMessage = getErrorNotificationMessage(e.message);\n        dispatch(createNotification(notificationMessage));\n      });\n  };\n\n  const unpublishTracks = async (track) => {\n    if (track) {\n      await client.unpublish(track);\n    } else {\n      await client.unpublish();\n    }\n  };\n\n  const leaveRtcChannel = async (isHost = true) => {\n    if (localAudioTrack) {\n      localAudioTrack.stop();\n      localAudioTrack.close();\n    }\n    if (localVideoTrack) {\n      localVideoTrack.stop();\n      localVideoTrack.close();\n    }\n    if (isHost) {\n      setRemoteUsers([]);\n      setJoinState(false);\n      await client?.leave();\n      setIsStreamEnded(true);\n    } else {\n      await client?.leave();\n    }\n  };\n\n  const muteAudio = async () => {\n    if (localAudioTrack) {\n      await localAudioTrack.setMuted(!localAudioTrack.muted);\n      setMediaStatus({\n        ...mediaStatus,\n        audio: {\n          ...mediaStatus.audio,\n          muted: localAudioTrack.muted,\n        },\n      });\n    }\n  };\n\n  const muteVideo = async () => {\n    if (localVideoTrack) {\n      await localVideoTrack.setMuted(!localVideoTrack.muted);\n      setMediaStatus({\n        ...mediaStatus,\n        video: {\n          ...mediaStatus.video,\n          muted: localVideoTrack.muted,\n        },\n      });\n    }\n  };\n\n  const toggleFullScreen = () => {\n    setMediaStatus((prevMediaStatus) => {\n      if (prevMediaStatus.video.fullScreen) {\n        document.body.style.overflow = \"auto\";\n      } else {\n        document.body.style.overflow = \"hidden\";\n      }\n      return {\n        ...prevMediaStatus,\n        video: {\n          ...prevMediaStatus.video,\n          fullScreen: !prevMediaStatus.video.fullScreen,\n        },\n      };\n    });\n  };\n\n  useEffect(() => {\n    if (!client) return;\n\n    setRemoteUsers(client.remoteUsers);\n\n    const handleUserPublished = async (user, mediaType) => {\n      // one to one logic here\n      await client.subscribe(user, mediaType);\n      // toggle rerender while state of remoteUsers changed.\n      setRemoteUsers((remoteUsers) => Array.from(client.remoteUsers));\n    };\n    const handleUserUnpublished = (user) => {\n      setRemoteUsers((remoteUsers) => Array.from(client.remoteUsers));\n    };\n    const handleUserJoined = (user) => {\n      setRemoteUsers((remoteUsers) => Array.from(client.remoteUsers));\n    };\n    const handleUserLeft = (user) => {\n      setRemoteUsers((remoteUsers) => Array.from(client.remoteUsers));\n    };\n\n    client.on(\"user-published\", handleUserPublished);\n    client.on(\"user-unpublished\", handleUserUnpublished);\n    client.on(\"user-joined\", handleUserJoined);\n    client.on(\"user-left\", handleUserLeft);\n\n    return () => {\n      client.off(\"user-published\", handleUserPublished);\n      client.off(\"user-unpublished\", handleUserUnpublished);\n      client.off(\"user-joined\", handleUserJoined);\n      client.off(\"user-left\", handleUserLeft);\n    };\n  }, [client]);\n\n  return {\n    localAudioTrack,\n    localVideoTrack,\n    joinState,\n    leaveRtcChannel,\n    join,\n    remoteUsers,\n    isStreamEnded,\n    muteAudio,\n    muteVideo,\n    mediaStatus,\n    toggleFullScreen,\n    unpublishTracks,\n    joinAudio,\n    unPublishLocalTracks,\n  };\n};\n\nexport default useAgoraRTC;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,SAASC,kBAAkB,QAAQ,oBAAoB;AACvD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,2BAA2B,QAAQ,0CAA0C;AAEtF,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC9B,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACK,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAACU,SAAS,CAAC;EACjE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAACU,SAAS,CAAC;EACjE,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC;IAC7CqB,KAAK,EAAE;MACLC,KAAK,EAAE;IACT,CAAC;IACDC,KAAK,EAAE;MACLD,KAAK,EAAE,KAAK;MACZE,UAAU,EAAE;IACd,CAAC;IACDC,gBAAgB,EAAE;EACpB,CAAC,CAAC;EAEF,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,WAAW,KAAK;IAC5D,MAAM,CAACC,eAAe,EAAEC,WAAW,CAAC,GAClC,MAAM7B,QAAQ,CAAC8B,+BAA+B,CAACJ,WAAW,EAAEC,WAAW,CAAC;IAC1EhB,kBAAkB,CAACiB,eAAe,CAAC;IACnCpB,kBAAkB,CAACqB,WAAW,CAAC;IAC/B,OAAO,CAACD,eAAe,EAAEC,WAAW,CAAC;EACvC,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAOL,WAAW,IAAK;IAC9C,MAAME,eAAe,GAAG,MAAM5B,QAAQ,CAACgC,0BAA0B,CAC/DN,WACF,CAAC;IACDf,kBAAkB,CAACiB,eAAe,CAAC;IACnC,OAAOA,eAAe;EACxB,CAAC;EAED,MAAMK,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,MAAM,CAACL,eAAe,EAAEC,WAAW,CAAC,GAAG,MAAMJ,iBAAiB,CAAC,CAAC;IAChE,MAAMpB,MAAM,CAAC6B,SAAS,CAAC,CAACN,eAAe,EAAEC,WAAW,CAAC,CAAC;EACxD,CAAC;EAED,MAAMM,IAAI,GAAG,MAAAA,CAAOC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,KAAK;IACxD,IAAI,CAACnC,MAAM,IAAI,CAACkC,IAAI,EAAE;IAEtB,IAAIC,IAAI,KAAK,MAAM,EAAE;MACnB,IAAID,IAAI,KAAK,UAAU,EAAE;QACvBlC,MAAM,CAACoC,aAAa,CAACF,IAAI,CAAC;MAC5B,CAAC,MAAM;QACLlC,MAAM,CAACoC,aAAa,CAACF,IAAI,CAAC;MAC5B;MAEA,MAAMlC,MAAM,CAAC8B,IAAI,CAACC,KAAK,EAAEC,OAAO,EAAEC,KAAK,IAAI,IAAI,CAAC,CAACI,KAAK,CAAEC,CAAC,IAAK;QAC5DC,eAAe,CAAC,CAAC;MACnB,CAAC,CAAC;MAEF,IAAIL,IAAI,KAAK,MAAM,EAAE;QACnB,MAAMM,SAAS,CAACC,YAAY,CACzBC,YAAY,CAAC;UAAE3B,KAAK,EAAE,IAAI;UAAEE,KAAK,EAAE;QAAK,CAAC,CAAC,CAC1C0B,IAAI,CAAC,MAAOC,GAAG,IAAK;UACnB,MAAM,CAACrB,eAAe,EAAEC,WAAW,CAAC,GAAG,MAAMJ,iBAAiB,CAAC,CAAC;UAChEI,WAAW,CAACqB,IAAI,CAAC,aAAa,EAAE;YAAEC,GAAG,EAAE,OAAO;YAAEC,MAAM,EAAE;UAAK,CAAC,CAAC;UAC/D,MAAM/C,MAAM,CAACgD,OAAO,CAAC,CAACzB,eAAe,EAAEC,WAAW,CAAC,CAAC;UACpDyB,MAAM,CAACjD,MAAM,GAAGA,MAAM;UACtBiD,MAAM,CAACC,UAAU,GAAG1B,WAAW;QACjC,CAAC,CAAC,CACDa,KAAK,CAAEC,CAAC,IAAK;UACZa,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEd,CAAC,CAAC;UACxBxB,cAAc,CAAEuC,IAAI,IAAK;YACvB,OAAO;cACL,GAAGA,IAAI;cACPlC,gBAAgB,EAAE;YACpB,CAAC;UACH,CAAC,CAAC;UACF,MAAMmC,mBAAmB,GAAGxD,2BAA2B,CAACwC,CAAC,CAACiB,OAAO,CAAC;UAClEtD,QAAQ,CAACL,kBAAkB,CAAC0D,mBAAmB,CAAC,CAAC;QACnD,CAAC,CAAC;MACN;MACA9C,YAAY,CAAC,IAAI,CAAC;MAClBM,cAAc,CAAEuC,IAAI,IAAK;QACvB,OAAO;UACL,GAAGA,IAAI;UACPlC,gBAAgB,EAAE;QACpB,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAMqB,SAAS,CAACC,YAAY,CACzBC,YAAY,CAAC;QAAE3B,KAAK,EAAE,IAAI;QAAEE,KAAK,EAAE;MAAK,CAAC,CAAC,CAC1C0B,IAAI,CAAC,MAAOC,GAAG,IAAK;QACnB,MAAM5C,MAAM,CAAC8B,IAAI,CAACC,KAAK,EAAEC,OAAO,EAAEC,KAAK,IAAI,IAAI,CAAC,CAACI,KAAK,CAAEC,CAAC,IAAK;UAC5DC,eAAe,CAAC,CAAC;QACnB,CAAC,CAAC;QACF,MAAM,CAAChB,eAAe,EAAEC,WAAW,CAAC,GAAG,MAAMJ,iBAAiB,CAAC,CAAC;QAChE,MAAMpB,MAAM,CAACgD,OAAO,CAAC,CAACzB,eAAe,EAAEC,WAAW,CAAC,CAAC;QACpDyB,MAAM,CAACjD,MAAM,GAAGA,MAAM;QACtBiD,MAAM,CAACC,UAAU,GAAG1B,WAAW;QAC/BhB,YAAY,CAAC,IAAI,CAAC;QAClBM,cAAc,CAAEuC,IAAI,IAAK;UACvB,OAAO;YACL,GAAGA,IAAI;YACPlC,gBAAgB,EAAE;UACpB,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,CAAC,CACDkB,KAAK,CAAEC,CAAC,IAAK;QACZa,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEd,CAAC,CAAC;QACxBxB,cAAc,CAAEuC,IAAI,IAAK;UACvB,OAAO;YACL,GAAGA,IAAI;YACPlC,gBAAgB,EAAE;UACpB,CAAC;QACH,CAAC,CAAC;QACF,MAAMmC,mBAAmB,GAAGxD,2BAA2B,CAACwC,CAAC,CAACiB,OAAO,CAAC;QAClEtD,QAAQ,CAACL,kBAAkB,CAAC0D,mBAAmB,CAAC,CAAC;MACnD,CAAC,CAAC;IACN;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EAED,MAAME,SAAS,GAAG,MAAAA,CAAOzB,KAAK,EAAEC,OAAO,EAAEC,KAAK,KAAK;IACjD,IAAI,CAACjC,MAAM,EAAE;IAEb,MAAMwC,SAAS,CAACC,YAAY,CACzBC,YAAY,CAAC;MAAE3B,KAAK,EAAE,IAAI;MAAEE,KAAK,EAAE;IAAM,CAAC,CAAC,CAC3C0B,IAAI,CAAC,MAAOC,GAAG,IAAK;MACnB,MAAM5C,MAAM,CAAC8B,IAAI,CAACC,KAAK,EAAEC,OAAO,EAAEC,KAAK,IAAI,IAAI,CAAC,CAACI,KAAK,CAAEC,CAAC,IAAK;QAC5DC,eAAe,CAAC,CAAC;MACnB,CAAC,CAAC;MACF,MAAMhB,eAAe,GAAG,MAAMG,gBAAgB,CAAC,CAAC;MAChD,MAAM1B,MAAM,CAACgD,OAAO,CAAC,CAACzB,eAAe,CAAC,CAAC;MACvC0B,MAAM,CAACjD,MAAM,GAAGA,MAAM;MACtBQ,YAAY,CAAC,IAAI,CAAC;MAClBM,cAAc,CAAEuC,IAAI,IAAK;QACvB,OAAO;UACL,GAAGA,IAAI;UACPlC,gBAAgB,EAAE;QACpB,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC,CACDkB,KAAK,CAAEC,CAAC,IAAK;MACZa,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEd,CAAC,CAAC;MACxBxB,cAAc,CAAEuC,IAAI,IAAK;QACvB,OAAO;UACL,GAAGA,IAAI;UACPlC,gBAAgB,EAAE;QACpB,CAAC;MACH,CAAC,CAAC;MACF,MAAMmC,mBAAmB,GAAGxD,2BAA2B,CAACwC,CAAC,CAACiB,OAAO,CAAC;MAClEtD,QAAQ,CAACL,kBAAkB,CAAC0D,mBAAmB,CAAC,CAAC;IACnD,CAAC,CAAC;EACN,CAAC;EAED,MAAMG,eAAe,GAAG,MAAOC,KAAK,IAAK;IACvC,IAAIA,KAAK,EAAE;MACT,MAAM1D,MAAM,CAAC6B,SAAS,CAAC6B,KAAK,CAAC;IAC/B,CAAC,MAAM;MACL,MAAM1D,MAAM,CAAC6B,SAAS,CAAC,CAAC;IAC1B;EACF,CAAC;EAED,MAAMU,eAAe,GAAG,MAAAA,CAAOoB,MAAM,GAAG,IAAI,KAAK;IAC/C,IAAItD,eAAe,EAAE;MACnBA,eAAe,CAACuD,IAAI,CAAC,CAAC;MACtBvD,eAAe,CAACwD,KAAK,CAAC,CAAC;IACzB;IACA,IAAI3D,eAAe,EAAE;MACnBA,eAAe,CAAC0D,IAAI,CAAC,CAAC;MACtB1D,eAAe,CAAC2D,KAAK,CAAC,CAAC;IACzB;IACA,IAAIF,MAAM,EAAE;MACVjD,cAAc,CAAC,EAAE,CAAC;MAClBF,YAAY,CAAC,KAAK,CAAC;MACnB,OAAMR,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE8D,KAAK,CAAC,CAAC;MACrBlD,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACL,OAAMZ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE8D,KAAK,CAAC,CAAC;IACvB;EACF,CAAC;EAED,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI1D,eAAe,EAAE;MACnB,MAAMA,eAAe,CAAC2D,QAAQ,CAAC,CAAC3D,eAAe,CAACW,KAAK,CAAC;MACtDF,cAAc,CAAC;QACb,GAAGD,WAAW;QACdE,KAAK,EAAE;UACL,GAAGF,WAAW,CAACE,KAAK;UACpBC,KAAK,EAAEX,eAAe,CAACW;QACzB;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMiD,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI/D,eAAe,EAAE;MACnB,MAAMA,eAAe,CAAC8D,QAAQ,CAAC,CAAC9D,eAAe,CAACc,KAAK,CAAC;MACtDF,cAAc,CAAC;QACb,GAAGD,WAAW;QACdI,KAAK,EAAE;UACL,GAAGJ,WAAW,CAACI,KAAK;UACpBD,KAAK,EAAEd,eAAe,CAACc;QACzB;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMkD,gBAAgB,GAAGA,CAAA,KAAM;IAC7BpD,cAAc,CAAEqD,eAAe,IAAK;MAClC,IAAIA,eAAe,CAAClD,KAAK,CAACC,UAAU,EAAE;QACpCkD,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,MAAM;MACvC,CAAC,MAAM;QACLH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,QAAQ;MACzC;MACA,OAAO;QACL,GAAGJ,eAAe;QAClBlD,KAAK,EAAE;UACL,GAAGkD,eAAe,CAAClD,KAAK;UACxBC,UAAU,EAAE,CAACiD,eAAe,CAAClD,KAAK,CAACC;QACrC;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAEDzB,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,MAAM,EAAE;IAEbU,cAAc,CAACV,MAAM,CAACS,WAAW,CAAC;IAElC,MAAM+D,mBAAmB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,SAAS,KAAK;MACrD;MACA,MAAM1E,MAAM,CAAC2E,SAAS,CAACF,IAAI,EAAEC,SAAS,CAAC;MACvC;MACAhE,cAAc,CAAED,WAAW,IAAKmE,KAAK,CAACC,IAAI,CAAC7E,MAAM,CAACS,WAAW,CAAC,CAAC;IACjE,CAAC;IACD,MAAMqE,qBAAqB,GAAIL,IAAI,IAAK;MACtC/D,cAAc,CAAED,WAAW,IAAKmE,KAAK,CAACC,IAAI,CAAC7E,MAAM,CAACS,WAAW,CAAC,CAAC;IACjE,CAAC;IACD,MAAMsE,gBAAgB,GAAIN,IAAI,IAAK;MACjC/D,cAAc,CAAED,WAAW,IAAKmE,KAAK,CAACC,IAAI,CAAC7E,MAAM,CAACS,WAAW,CAAC,CAAC;IACjE,CAAC;IACD,MAAMuE,cAAc,GAAIP,IAAI,IAAK;MAC/B/D,cAAc,CAAED,WAAW,IAAKmE,KAAK,CAACC,IAAI,CAAC7E,MAAM,CAACS,WAAW,CAAC,CAAC;IACjE,CAAC;IAEDT,MAAM,CAACiF,EAAE,CAAC,gBAAgB,EAAET,mBAAmB,CAAC;IAChDxE,MAAM,CAACiF,EAAE,CAAC,kBAAkB,EAAEH,qBAAqB,CAAC;IACpD9E,MAAM,CAACiF,EAAE,CAAC,aAAa,EAAEF,gBAAgB,CAAC;IAC1C/E,MAAM,CAACiF,EAAE,CAAC,WAAW,EAAED,cAAc,CAAC;IAEtC,OAAO,MAAM;MACXhF,MAAM,CAACkF,GAAG,CAAC,gBAAgB,EAAEV,mBAAmB,CAAC;MACjDxE,MAAM,CAACkF,GAAG,CAAC,kBAAkB,EAAEJ,qBAAqB,CAAC;MACrD9E,MAAM,CAACkF,GAAG,CAAC,aAAa,EAAEH,gBAAgB,CAAC;MAC3C/E,MAAM,CAACkF,GAAG,CAAC,WAAW,EAAEF,cAAc,CAAC;IACzC,CAAC;EACH,CAAC,EAAE,CAAChF,MAAM,CAAC,CAAC;EAEZ,OAAO;IACLK,eAAe;IACfH,eAAe;IACfK,SAAS;IACTgC,eAAe;IACfT,IAAI;IACJrB,WAAW;IACXE,aAAa;IACboD,SAAS;IACTE,SAAS;IACTpD,WAAW;IACXqD,gBAAgB;IAChBT,eAAe;IACfD,SAAS;IACT5B;EACF,CAAC;AACH,CAAC;AAED,eAAe7B,WAAW"},"metadata":{},"sourceType":"module"}