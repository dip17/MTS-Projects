{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchSesssionManagementSuccess, fetchSesssionManagementFailure, deleteSingleLoginSessionSuccess, deleteSingleLoginSessionFailure, deleteAllLoginSessionSuccess, deleteAllLoginSessionFailure } from \"../actions/SessionManagementAction\";\nimport { FETCH_SESSION_MANAGEMENT_LIST_START, DELETE_SINGLE_LOGIN_SESSION_START, DELETE_ALL_LOGIN_SESSION_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nfunction* fetchSessionListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_index\", action.data);\n    if (response.data.success) {\n      yield put(fetchSesssionManagementSuccess(response.data.data));\n    } else {\n      yield put(fetchSesssionManagementFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSesssionManagementFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* deleteSingleLoginSessionAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_delete\", action.data);\n    if (response.data.success) {\n      yield put(deleteSingleLoginSessionSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteSingleLoginSessionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteSingleLoginSessionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* deleteAllLoginSessionAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_delete_all\", action.data);\n    if (response.data.success) {\n      yield put(deleteAllLoginSessionSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/\");\n    } else {\n      yield put(deleteAllLoginSessionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteAllLoginSessionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_SESSION_MANAGEMENT_LIST_START, fetchSessionListAPI)]);\n  yield all([yield takeLatest(DELETE_SINGLE_LOGIN_SESSION_START, deleteSingleLoginSessionAPI)]);\n  yield all([yield takeLatest(DELETE_ALL_LOGIN_SESSION_START, deleteAllLoginSessionAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchSesssionManagementSuccess","fetchSesssionManagementFailure","deleteSingleLoginSessionSuccess","deleteSingleLoginSessionFailure","deleteAllLoginSessionSuccess","deleteAllLoginSessionFailure","FETCH_SESSION_MANAGEMENT_LIST_START","DELETE_SINGLE_LOGIN_SESSION_START","DELETE_ALL_LOGIN_SESSION_START","checkLogoutStatus","fetchSessionListAPI","action","response","postMethod","data","success","error","notificationMessage","message","deleteSingleLoginSessionAPI","deleteAllLoginSessionAPI","window","location","assign","pageSaga"],"sources":["/home/mts/Vishal/src/store/sagas/SessionSaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchSesssionManagementSuccess,\n  fetchSesssionManagementFailure,\n  deleteSingleLoginSessionSuccess,\n  deleteSingleLoginSessionFailure,\n  deleteAllLoginSessionSuccess,\n  deleteAllLoginSessionFailure,\n} from \"../actions/SessionManagementAction\";\nimport {\n  FETCH_SESSION_MANAGEMENT_LIST_START,\n  DELETE_SINGLE_LOGIN_SESSION_START,\n  DELETE_ALL_LOGIN_SESSION_START,\n} from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchSessionListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_index\", action.data);\n    if (response.data.success) {\n      yield put(fetchSesssionManagementSuccess(response.data.data));\n    } else {\n      yield put(fetchSesssionManagementFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSesssionManagementFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteSingleLoginSessionAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_delete\", action.data);\n    if (response.data.success) {\n      yield put(deleteSingleLoginSessionSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteSingleLoginSessionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteSingleLoginSessionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteAllLoginSessionAPI(action) {\n  try {\n    const response = yield api.postMethod(\n      \"login_session_delete_all\",\n      action.data\n    );\n    if (response.data.success) {\n      yield put(deleteAllLoginSessionSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/\");\n    } else {\n      yield put(deleteAllLoginSessionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteAllLoginSessionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(FETCH_SESSION_MANAGEMENT_LIST_START, fetchSessionListAPI),\n  ]);\n  yield all([\n    yield takeLatest(\n      DELETE_SINGLE_LOGIN_SESSION_START,\n      deleteSingleLoginSessionAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(DELETE_ALL_LOGIN_SESSION_START, deleteAllLoginSessionAPI),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}