{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_ALL_TRANSACTION_START, FETCH_MORE_ALL_TRANSACTION_START, FETCH_SENT_PAYMENT_TRANSACTION_START, FETCH_RECEIVED_PAYMENT_TRANSACTION_START, FETCH_DEPOSIT_TRANSACTION_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchAllTransactionSuccess, fetchAllTransactionFailure, fetchSentPaymentTransactionSuccess, fetchSentPaymentTransactionFailure, fetchReceivedPaymentTransactionSuccess, fetchReceivedPaymentTransactionFailure, fetchDepositTransactionSuccess, fetchDepositTransactionFailure } from \"../actions/TransactionAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nfunction* fetchAllTransactionAPI(action) {\n  try {\n    const response = yield api.postMethod(\"wallets_history\", action.data);\n    if (response.data.success) {\n      yield put(fetchAllTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchAllTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchAllTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchSentPaymentTransAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_sent\");\n    if (response.data.success) {\n      yield put(fetchSentPaymentTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchSentPaymentTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSentPaymentTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchReceivedPayTransAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_received\");\n    if (response.data.success) {\n      yield put(fetchReceivedPaymentTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchReceivedPaymentTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchReceivedPaymentTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchDepositTransactionAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_add\");\n    if (response.data.success) {\n      yield put(fetchDepositTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchDepositTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchDepositTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_ALL_TRANSACTION_START, fetchAllTransactionAPI), yield takeLatest(FETCH_MORE_ALL_TRANSACTION_START, fetchAllTransactionAPI), yield takeLatest(FETCH_SENT_PAYMENT_TRANSACTION_START, fetchSentPaymentTransAPI), yield takeLatest(FETCH_RECEIVED_PAYMENT_TRANSACTION_START, fetchReceivedPayTransAPI), yield takeLatest(FETCH_DEPOSIT_TRANSACTION_START, fetchDepositTransactionAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","FETCH_ALL_TRANSACTION_START","FETCH_MORE_ALL_TRANSACTION_START","FETCH_SENT_PAYMENT_TRANSACTION_START","FETCH_RECEIVED_PAYMENT_TRANSACTION_START","FETCH_DEPOSIT_TRANSACTION_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchAllTransactionSuccess","fetchAllTransactionFailure","fetchSentPaymentTransactionSuccess","fetchSentPaymentTransactionFailure","fetchReceivedPaymentTransactionSuccess","fetchReceivedPaymentTransactionFailure","fetchDepositTransactionSuccess","fetchDepositTransactionFailure","checkLogoutStatus","fetchAllTransactionAPI","action","response","postMethod","data","success","error","notificationMessage","message","fetchSentPaymentTransAPI","fetchReceivedPayTransAPI","fetchDepositTransactionAPI","pageSaga"],"sources":["/home/mts/Vishal/src/store/sagas/TransactionSaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\n\nimport api from \"../../Environment\";\nimport {\n  FETCH_ALL_TRANSACTION_START,\n  FETCH_MORE_ALL_TRANSACTION_START,\n  FETCH_SENT_PAYMENT_TRANSACTION_START,\n  FETCH_RECEIVED_PAYMENT_TRANSACTION_START,\n  FETCH_DEPOSIT_TRANSACTION_START,\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\n\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchAllTransactionSuccess,\n  fetchAllTransactionFailure,\n  fetchSentPaymentTransactionSuccess,\n  fetchSentPaymentTransactionFailure,\n  fetchReceivedPaymentTransactionSuccess,\n  fetchReceivedPaymentTransactionFailure,\n  fetchDepositTransactionSuccess,\n  fetchDepositTransactionFailure,\n} from \"../actions/TransactionAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchAllTransactionAPI(action) {\n  try {\n    const response = yield api.postMethod(\"wallets_history\", action.data);\n    if (response.data.success) {\n      yield put(fetchAllTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchAllTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchAllTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSentPaymentTransAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_sent\");\n    if (response.data.success) {\n      yield put(fetchSentPaymentTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchSentPaymentTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSentPaymentTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchReceivedPayTransAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_received\");\n    if (response.data.success) {\n      yield put(fetchReceivedPaymentTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchReceivedPaymentTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchReceivedPaymentTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchDepositTransactionAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_add\");\n    if (response.data.success) {\n      yield put(fetchDepositTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchDepositTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchDepositTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(FETCH_ALL_TRANSACTION_START, fetchAllTransactionAPI),\n    yield takeLatest(FETCH_MORE_ALL_TRANSACTION_START, fetchAllTransactionAPI),\n    yield takeLatest(\n      FETCH_SENT_PAYMENT_TRANSACTION_START,\n      fetchSentPaymentTransAPI\n    ),\n    yield takeLatest(\n      FETCH_RECEIVED_PAYMENT_TRANSACTION_START,\n      fetchReceivedPayTransAPI\n    ),\n    yield takeLatest(\n      FETCH_DEPOSIT_TRANSACTION_START,\n      fetchDepositTransactionAPI\n    ),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}