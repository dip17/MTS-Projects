{"ast":null,"code":"var _jsxFileName = \"/home/mts/FX-Project/src/components/helper/NewComments.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Picker, EmojiData } from \"emoji-mart3\";\nimport \"emoji-mart3/css/emoji-mart.css\";\nimport PostEditor from \"../Post/postMentions/PostEditor\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport { Dropdown, Container, Row, Col, Button, Form, Image, Media, InputGroup } from \"react-bootstrap\";\nimport { saveCommentStart } from '../../store/actions/CommentsAction';\nimport { connect } from 'react-redux';\nimport { translate, t } from \"react-multi-lang\";\nconst NewComments = props => {\n  const mentionsRef = useRef();\n  const [editorContentState, setEditorContentstate] = useState(\"\");\n  const [editorHtmlContent, setEditorHtmlContent] = useState(\"\");\n  const [emojiPickerState, SetEmojiPicker] = useState(false);\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  function triggerPicker(event) {\n    event.preventDefault();\n    SetEmojiPicker(!emojiPickerState);\n  }\n  const handleEmojiSelect = emoji => {\n    SetEmojiPicker(false);\n    setEditorState(insertCharacter(emoji.native, editorState));\n  };\n  const insertCharacter = (emoji, editorState) => {\n    const currentContent = editorState.getCurrentContent();\n    const currentSelection = editorState.getSelection();\n    const newContent = Modifier.insertText(currentContent, currentSelection, emoji);\n    const newEditorState = EditorState.push(editorState, newContent, \"insert-characters\");\n    return EditorState.forceSelection(newEditorState, newContent.getSelectionAfter());\n  };\n  const handleCommentSubmit = event => {\n    event.preventDefault();\n    props.dispatch(saveCommentStart({\n      comment: editorHtmlContent,\n      post_id: props.post.post_id\n    }));\n    // setCommentInputData({});\n    setEditorState(EditorState.createEmpty());\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"new-single-post-comments-input-sec\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"new-comments-form\",\n    onSubmit: handleCommentSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    onClick: triggerPicker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    className: \"new-feed-wishlist-icon\",\n    src: window.location.origin + \"/assets/images/feed-story/comments-emoji.svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })), emojiPickerState && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"emojiWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Picker, {\n    title: \"\",\n    emoji: \"point_up\",\n    onSelect: emoji => handleEmojiSelect(emoji),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PostEditor, {\n    className: \"form-control\",\n    placeholder: t(\"type_something\"),\n    ref: mentionsRef,\n    getEditorRawContent: setEditorContentstate,\n    getEditorHtmlContent: setEditorHtmlContent,\n    dispatch: props.dispatch,\n    editorState: editorState,\n    setEditorState: setEditorState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(InputGroup.Text, {\n    onClick: handleCommentSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    className: \"new-feed-wishlist-icon\",\n    src: window.location.origin + \"/assets/images/feed-story/comments-send.svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  })))));\n};\nconst mapStateToPros = state => ({});\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch\n  };\n}\nexport default connect(mapStateToPros, mapDispatchToProps)(translate(NewComments));","map":{"version":3,"names":["React","useState","useEffect","useRef","Picker","EmojiData","PostEditor","EditorState","convertToRaw","Modifier","Dropdown","Container","Row","Col","Button","Form","Image","Media","InputGroup","saveCommentStart","connect","translate","t","NewComments","props","mentionsRef","editorContentState","setEditorContentstate","editorHtmlContent","setEditorHtmlContent","emojiPickerState","SetEmojiPicker","editorState","setEditorState","createEmpty","triggerPicker","event","preventDefault","handleEmojiSelect","emoji","insertCharacter","native","currentContent","getCurrentContent","currentSelection","getSelection","newContent","insertText","newEditorState","push","forceSelection","getSelectionAfter","handleCommentSubmit","dispatch","comment","post_id","post","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Text","onClick","src","window","location","origin","title","onSelect","placeholder","ref","getEditorRawContent","getEditorHtmlContent","mapStateToPros","state","mapDispatchToProps"],"sources":["/home/mts/FX-Project/src/components/helper/NewComments.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Picker, EmojiData } from \"emoji-mart3\";\nimport \"emoji-mart3/css/emoji-mart.css\";\nimport PostEditor from \"../Post/postMentions/PostEditor\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport {\n  Dropdown,\n  Container,\n  Row,\n  Col,\n  Button,\n  Form,\n  Image,\n  Media,\n  InputGroup,\n} from \"react-bootstrap\";\nimport { saveCommentStart } from '../../store/actions/CommentsAction';\nimport { connect } from 'react-redux';\nimport { translate, t } from \"react-multi-lang\";\n\nconst NewComments = (props) => {\n  const mentionsRef = useRef();\n\n  const [editorContentState, setEditorContentstate] = useState(\"\");\n  const [editorHtmlContent, setEditorHtmlContent] = useState(\"\");\n  const [emojiPickerState, SetEmojiPicker] = useState(false);\n  const [editorState, setEditorState] = useState(() =>\n    EditorState.createEmpty()\n  );\n\n  function triggerPicker(event) {\n    event.preventDefault();\n    SetEmojiPicker(!emojiPickerState);\n  }\n\n  const handleEmojiSelect = (emoji) => {\n    SetEmojiPicker(false);\n    setEditorState(insertCharacter(emoji.native, editorState));\n  };\n\n  const insertCharacter = (emoji, editorState) => {\n\n    const currentContent = editorState.getCurrentContent();\n    const currentSelection = editorState.getSelection();\n\n    const newContent = Modifier.insertText(\n      currentContent,\n      currentSelection,\n      emoji\n    );\n\n    const newEditorState = EditorState.push(\n      editorState,\n      newContent,\n      \"insert-characters\"\n    );\n\n    return EditorState.forceSelection(\n      newEditorState,\n      newContent.getSelectionAfter()\n    );\n  };\n\n  const handleCommentSubmit = (event) => {\n    event.preventDefault();\n\n    props.dispatch(\n      saveCommentStart({\n        comment: editorHtmlContent,\n        post_id: props.post.post_id,\n      })\n    );\n    // setCommentInputData({});\n    setEditorState(EditorState.createEmpty());\n  };\n\n  return (\n    <div className=\"new-single-post-comments-input-sec\">\n      <Form className=\"new-comments-form\" onSubmit={handleCommentSubmit}>\n        <InputGroup className=\"mb-0\">\n          <InputGroup.Text onClick={triggerPicker}>\n            <Image\n              className=\"new-feed-wishlist-icon\"\n              src={\n                window.location.origin + \"/assets/images/feed-story/comments-emoji.svg\"\n              }\n            />\n          </InputGroup.Text>\n          {emojiPickerState && (\n            <div className=\"emojiWrapper\">\n              <Picker\n                title=\"\"\n                emoji=\"point_up\"\n                onSelect={(emoji) => handleEmojiSelect(emoji)}\n              />\n            </div>\n          )}\n          <div className=\"text-box\">\n            {/* <Form onSubmit={handleCommentSubmit}> */}\n            <PostEditor\n              className=\"form-control\"\n              placeholder={t(\"type_something\")}\n              ref={mentionsRef}\n              getEditorRawContent={setEditorContentstate}\n              getEditorHtmlContent={setEditorHtmlContent}\n              dispatch={props.dispatch}\n              editorState={editorState}\n              setEditorState={setEditorState}\n            />\n            {/* </Form> */}\n          </div>\n          {/* <Form.Control aria-label=\"Amount (to the nearest dollar)\" placeholder=\"Type something\" /> */}\n          <InputGroup.Text onClick={handleCommentSubmit}>\n            <Image\n              className=\"new-feed-wishlist-icon\"\n              src={\n                window.location.origin + \"/assets/images/feed-story/comments-send.svg\"\n              }\n            />\n          </InputGroup.Text>\n        </InputGroup>\n      </Form>\n    </div>\n  )\n\n}\n\nconst mapStateToPros = (state) => ({\n\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return { dispatch };\n}\n\nexport default connect(mapStateToPros, mapDispatchToProps)(translate(NewComments));"],"mappings":"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"},"metadata":{},"sourceType":"module"}