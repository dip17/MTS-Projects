{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { videoCallBroadcastFailure, videoCallBroadcastSuccess, fetchLiveVideosSuccess, fetchLiveVideosFailure, fetchLiveVideosHistorySuccess, fetchLiveVideosHistoryFailure, fetchSingleLiveVideoSuccess, fetchSingleLiveVideoFailure, joinLiveVideosSuccess, joinLiveVideosFailure, livePaymentPaypalSuccess, livePaymentPaypalFailure, livePaymentStripeSuccess, livePaymentStripeFailure, liveViewerUpdateSuccess, liveViewerUpdateFailure, liveVideoEndSuccess, liveVideoEndFailure, livePaymentWalletSuccess, livePaymentWalletFailure, fetchPopularLiveVideosSuccess, fetchPopularLiveVideosFailure, fetchRecommendedLiveVideosSuccess, fetchRecommendedLiveVideosFailure, fetchLiveVideoChatMessagesSuccess, fetchLiveVideoChatMessagesFailure, fetchLiveVideosListSuccess, fetchLiveVideosListFailure, fetchLiveAudienceListStart, fetchLiveAudienceListSuccess, fetchLiveAudienceListFailure, saveLiveChatMessageSuccess, saveLiveChatMessageFailure, singleLiveVideoViewSuccess, singleLiveVideoViewFailure, updateLiveAudianceCount, updateLiveAudianceEarnings, updateLiveAudianceList } from \"../actions/LiveVideoAction\";\nimport { VIDEO_CALL_BROADCAST_START, FETCH_LIVE_VIDEOS_START, FETCH_LIVE_VIDEOS_HISTORY_START, JOIN_LIVE_VIDEOS_START, FETCH_SINGLE_LIVE_VIDEOS_START, LIVE_VIDEOS_PAYMENT_BY_STRIPE_START, LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START, LIVE_VIDEOS_VIEWER_UPDATE_START, LIVE_VIDEOS_END_START, LIVE_VIDEOS_PAYMENT_BY_WALLET_START, FETCH_POPULAR_LIVE_VIDEOS_START, FETCH_MORE_POPULAR_LIVE_VIDEOS_START, FETCH_RECOMMENDED_LIVE_VIDEOS_START, FETCH_MORE_RECOMMENDED_LIVE_VIDEOS_START, FETCH_LIVE_VIDEOS_CHAT_MESSAGES_START, FETCH_MORE_LIVE_VIDEOS_START, FETCH_LIVE_VIDEOS_LIST_START, FETCH_MORE_LIVE_VIDEOS_LIST_START, FETCH_LIVE_AUDIENCE_LIST_START, FETCH_LIVE_VIDEO_CHAT_MESSAGE_LIST_START, SAVE_LIVE_CHAT_MESSAGE_START, SINGLE_LIVE_VIDEO_VIEW_START, FETCH_MORE_LIVE_VIDEOS_HISTORY_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nimport configuration from \"react-global-configuration\";\nfunction* liveVideoSaveAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.saveLiveVideo.inputData);\n    const response = yield api.postMethod(\"live_videos_broadcast_start\", inputData);\n    if (response.data.success) {\n      yield put(videoCallBroadcastSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin + \"/join-live/\" + response.data.data.live_video_unique_id);\n    } else {\n      yield put(videoCallBroadcastFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallBroadcastFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* liveVideosAPI(action) {\n  try {\n    const response = yield api.postMethod(\"live_videos\", action.data);\n    if (response.data.success) {\n      yield put(fetchLiveVideosSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* liveVideosHistoryAPI(action) {\n  try {\n    const response = yield api.postMethod(\"live_videos_owner_list\", action.data);\n    if (response.data.success) {\n      yield put(fetchLiveVideosHistorySuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosHistoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosHistoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchSingleLiveVideoAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.singleLiveVideo.inputData);\n    const response = yield api.postMethod(\"live_videos_view\", inputData);\n    if (response.data.success) {\n      yield put(fetchSingleLiveVideoSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleLiveVideoFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleLiveVideoFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* liveStripeAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.liveStripe.inputData);\n    const response = yield api.postMethod(\"live_videos_payment_by_card\", inputData);\n    if (response.data.success) {\n      yield put(livePaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin + \"/live-video/\" + response.data.data.live_video_unique_id);\n    } else {\n      yield put(livePaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* livePaypalAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.livePaypal.inputData);\n    const response = yield api.postMethod(\"live_videos_payment_by_paypal\", inputData);\n    if (response.data.success) {\n      yield put(livePaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin + \"/live-video/\" + response.data.data.live_video_unique_id);\n    } else {\n      yield put(livePaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* liveViewerUpdateAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.liveViewerUpdate.inputData);\n    const response = yield api.postMethod(\"live_videos_viewer_update\", inputData);\n    if (response.data.success) {\n      yield put(liveViewerUpdateSuccess(response.data.data));\n      // const notificationMessage = getSuccessNotificationMessage(\n      //   response.data.message\n      // );\n      // yield put(createNotification(notificationMessage));\n    } else {\n      yield put(liveViewerUpdateFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(liveViewerUpdateFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* liveEndAPI(action) {\n  try {\n    const inputData = yield select(state => state.liveVideo.liveEnd.inputData);\n    const response = yield api.postMethod(\"live_videos_broadcast_stop\", inputData);\n    if (response.data.success) {\n      yield put(liveVideoEndSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      setTimeout(() => {\n        if (action.data.isOwner) {\n          window.location.assign(window.location.origin + \"/live-videos-history\");\n        } else {\n          window.location.assign(window.location.origin + \"/live-videos\");\n        }\n      }, 1000);\n    } else {\n      yield put(liveVideoEndFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(liveVideoEndFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* liveWalletAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.liveWallet.inputData);\n    const response = yield api.postMethod(\"live_videos_payment_by_wallet\", inputData);\n    if (response.data.success) {\n      yield put(livePaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin + \"/live-video/\" + response.data.data.live_video_unique_id);\n    } else {\n      yield put(livePaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchPopularLiveVideosAPI(action) {\n  try {\n    const response = yield api.postMethod(\"popular_live_videos\", action.data);\n    if (response.data.success) {\n      yield put(fetchPopularLiveVideosSuccess(response.data.data));\n    } else {\n      yield put(fetchPopularLiveVideosFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPopularLiveVideosFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchRecommendedLiveVideosAPI(action) {\n  try {\n    const response = yield api.postMethod(\"recommended_live_videos\", action.data);\n    if (response.data.success) {\n      yield put(fetchRecommendedLiveVideosSuccess(response.data.data));\n    } else {\n      yield put(fetchRecommendedLiveVideosFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchRecommendedLiveVideosFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchLiveVideoChatMessagesAPI(action) {\n  try {\n    const response = yield api.postMethod(\"live_video_chat_messages\", action.data);\n    if (response.data.success) {\n      yield put(fetchLiveVideoChatMessagesSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideoChatMessagesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideoChatMessagesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchLiveVideosListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"live_videos_list\", action.data);\n    if (response.data.success) {\n      yield put(fetchLiveVideosListSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchLiveAudienceListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"live_videos_viewers_list\", action.data);\n    if (response.data.success) {\n      console.log(...response.data.data.viewers, \"res\");\n      yield put(fetchLiveAudienceListSuccess(response.data.data));\n      yield put(updateLiveAudianceCount(response.data.data.total_viewers));\n      yield put(updateLiveAudianceEarnings({\n        total_earnings: response.data.data.total_revenue.replace(configuration.get(\"configData.token_symbol\"), \"\").trim(),\n        total_earnings_formatted: response.data.data.total_revenue\n      }));\n    } else {\n      yield put(fetchLiveAudienceListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveAudienceListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchLiveVideoChatMessageListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"live_video_chat_messages\", action.data);\n    if (response.data.success) {\n      yield put(fetchLiveVideoChatMessagesSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideoChatMessagesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideoChatMessagesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* saveLivechatMessageAPI(action) {\n  try {\n    const response = yield api.postMethod(\"live_chat_messages_save\", action.data);\n    if (response.data.success) {\n      yield put(saveLiveChatMessageSuccess(response.data.data));\n    } else {\n      yield put(saveLiveChatMessageFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveLiveChatMessageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* singleLiveVideoViewAPI(action) {\n  try {\n    const response = yield api.postMethod(\"single_live_video_view\", action.data);\n    if (response.data.success) {\n      yield put(singleLiveVideoViewSuccess(response.data.data));\n    } else {\n      yield put(singleLiveVideoViewFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(singleLiveVideoViewFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(VIDEO_CALL_BROADCAST_START, liveVideoSaveAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEOS_START, liveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_MORE_LIVE_VIDEOS_START, liveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEOS_HISTORY_START, liveVideosHistoryAPI)]);\n  yield all([yield takeLatest(FETCH_MORE_LIVE_VIDEOS_HISTORY_START, liveVideosHistoryAPI)]);\n  // yield all([yield takeLatest(JOIN_LIVE_VIDEOS_START, joinLiveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_SINGLE_LIVE_VIDEOS_START, fetchSingleLiveVideoAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_STRIPE_START, liveStripeAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START, livePaypalAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_VIEWER_UPDATE_START, liveViewerUpdateAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_END_START, liveEndAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_WALLET_START, liveWalletAPI)]);\n  yield all([yield takeLatest(FETCH_POPULAR_LIVE_VIDEOS_START, fetchPopularLiveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_MORE_POPULAR_LIVE_VIDEOS_START, fetchPopularLiveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_RECOMMENDED_LIVE_VIDEOS_START, fetchRecommendedLiveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_MORE_RECOMMENDED_LIVE_VIDEOS_START, fetchRecommendedLiveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEOS_CHAT_MESSAGES_START, fetchLiveVideoChatMessagesAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEOS_LIST_START, fetchLiveVideosListAPI)]);\n  yield all([yield takeLatest(FETCH_MORE_LIVE_VIDEOS_LIST_START, fetchLiveVideosListAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_AUDIENCE_LIST_START, fetchLiveAudienceListAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEO_CHAT_MESSAGE_LIST_START, fetchLiveVideoChatMessageListAPI)]);\n  yield all([yield takeLatest(SAVE_LIVE_CHAT_MESSAGE_START, saveLivechatMessageAPI)]);\n  yield all([yield takeLatest(SINGLE_LIVE_VIDEO_VIEW_START, singleLiveVideoViewAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","videoCallBroadcastFailure","videoCallBroadcastSuccess","fetchLiveVideosSuccess","fetchLiveVideosFailure","fetchLiveVideosHistorySuccess","fetchLiveVideosHistoryFailure","fetchSingleLiveVideoSuccess","fetchSingleLiveVideoFailure","joinLiveVideosSuccess","joinLiveVideosFailure","livePaymentPaypalSuccess","livePaymentPaypalFailure","livePaymentStripeSuccess","livePaymentStripeFailure","liveViewerUpdateSuccess","liveViewerUpdateFailure","liveVideoEndSuccess","liveVideoEndFailure","livePaymentWalletSuccess","livePaymentWalletFailure","fetchPopularLiveVideosSuccess","fetchPopularLiveVideosFailure","fetchRecommendedLiveVideosSuccess","fetchRecommendedLiveVideosFailure","fetchLiveVideoChatMessagesSuccess","fetchLiveVideoChatMessagesFailure","fetchLiveVideosListSuccess","fetchLiveVideosListFailure","fetchLiveAudienceListStart","fetchLiveAudienceListSuccess","fetchLiveAudienceListFailure","saveLiveChatMessageSuccess","saveLiveChatMessageFailure","singleLiveVideoViewSuccess","singleLiveVideoViewFailure","updateLiveAudianceCount","updateLiveAudianceEarnings","updateLiveAudianceList","VIDEO_CALL_BROADCAST_START","FETCH_LIVE_VIDEOS_START","FETCH_LIVE_VIDEOS_HISTORY_START","JOIN_LIVE_VIDEOS_START","FETCH_SINGLE_LIVE_VIDEOS_START","LIVE_VIDEOS_PAYMENT_BY_STRIPE_START","LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START","LIVE_VIDEOS_VIEWER_UPDATE_START","LIVE_VIDEOS_END_START","LIVE_VIDEOS_PAYMENT_BY_WALLET_START","FETCH_POPULAR_LIVE_VIDEOS_START","FETCH_MORE_POPULAR_LIVE_VIDEOS_START","FETCH_RECOMMENDED_LIVE_VIDEOS_START","FETCH_MORE_RECOMMENDED_LIVE_VIDEOS_START","FETCH_LIVE_VIDEOS_CHAT_MESSAGES_START","FETCH_MORE_LIVE_VIDEOS_START","FETCH_LIVE_VIDEOS_LIST_START","FETCH_MORE_LIVE_VIDEOS_LIST_START","FETCH_LIVE_AUDIENCE_LIST_START","FETCH_LIVE_VIDEO_CHAT_MESSAGE_LIST_START","SAVE_LIVE_CHAT_MESSAGE_START","SINGLE_LIVE_VIDEO_VIEW_START","FETCH_MORE_LIVE_VIDEOS_HISTORY_START","checkLogoutStatus","configuration","liveVideoSaveAPI","inputData","state","liveVideo","saveLiveVideo","response","postMethod","data","success","notificationMessage","message","window","location","assign","origin","live_video_unique_id","error","liveVideosAPI","action","liveVideosHistoryAPI","fetchSingleLiveVideoAPI","singleLiveVideo","liveStripeAPI","liveStripe","livePaypalAPI","livePaypal","liveViewerUpdateAPI","liveViewerUpdate","liveEndAPI","liveEnd","setTimeout","isOwner","liveWalletAPI","liveWallet","fetchPopularLiveVideosAPI","fetchRecommendedLiveVideosAPI","fetchLiveVideoChatMessagesAPI","fetchLiveVideosListAPI","fetchLiveAudienceListAPI","console","log","viewers","total_viewers","total_earnings","total_revenue","replace","get","trim","total_earnings_formatted","fetchLiveVideoChatMessageListAPI","saveLivechatMessageAPI","singleLiveVideoViewAPI","pageSaga"],"sources":["/home/mts/FX-Project/src/store/sagas/LiveVideoSaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  videoCallBroadcastFailure,\n  videoCallBroadcastSuccess,\n  fetchLiveVideosSuccess,\n  fetchLiveVideosFailure,\n  fetchLiveVideosHistorySuccess,\n  fetchLiveVideosHistoryFailure,\n  fetchSingleLiveVideoSuccess,\n  fetchSingleLiveVideoFailure,\n  joinLiveVideosSuccess,\n  joinLiveVideosFailure,\n  livePaymentPaypalSuccess,\n  livePaymentPaypalFailure,\n  livePaymentStripeSuccess,\n  livePaymentStripeFailure,\n  liveViewerUpdateSuccess,\n  liveViewerUpdateFailure,\n  liveVideoEndSuccess,\n  liveVideoEndFailure,\n  livePaymentWalletSuccess,\n  livePaymentWalletFailure,\n  fetchPopularLiveVideosSuccess,\n  fetchPopularLiveVideosFailure,\n  fetchRecommendedLiveVideosSuccess,\n  fetchRecommendedLiveVideosFailure,\n  fetchLiveVideoChatMessagesSuccess,\n  fetchLiveVideoChatMessagesFailure,\n  fetchLiveVideosListSuccess,\n  fetchLiveVideosListFailure,\n  fetchLiveAudienceListStart,\n  fetchLiveAudienceListSuccess,\n  fetchLiveAudienceListFailure,\n  saveLiveChatMessageSuccess,\n  saveLiveChatMessageFailure,\n  singleLiveVideoViewSuccess,\n  singleLiveVideoViewFailure,\n  updateLiveAudianceCount,\n  updateLiveAudianceEarnings,\n  updateLiveAudianceList,\n} from \"../actions/LiveVideoAction\";\nimport {\n  VIDEO_CALL_BROADCAST_START,\n  FETCH_LIVE_VIDEOS_START,\n  FETCH_LIVE_VIDEOS_HISTORY_START,\n  JOIN_LIVE_VIDEOS_START,\n  FETCH_SINGLE_LIVE_VIDEOS_START,\n  LIVE_VIDEOS_PAYMENT_BY_STRIPE_START,\n  LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START,\n  LIVE_VIDEOS_VIEWER_UPDATE_START,\n  LIVE_VIDEOS_END_START,\n  LIVE_VIDEOS_PAYMENT_BY_WALLET_START,\n  FETCH_POPULAR_LIVE_VIDEOS_START,\n  FETCH_MORE_POPULAR_LIVE_VIDEOS_START,\n  FETCH_RECOMMENDED_LIVE_VIDEOS_START,\n  FETCH_MORE_RECOMMENDED_LIVE_VIDEOS_START,\n  FETCH_LIVE_VIDEOS_CHAT_MESSAGES_START,\n  FETCH_MORE_LIVE_VIDEOS_START,\n  FETCH_LIVE_VIDEOS_LIST_START,\n  FETCH_MORE_LIVE_VIDEOS_LIST_START,\n  FETCH_LIVE_AUDIENCE_LIST_START,\n  FETCH_LIVE_VIDEO_CHAT_MESSAGE_LIST_START,\n  SAVE_LIVE_CHAT_MESSAGE_START,\n  SINGLE_LIVE_VIDEO_VIEW_START,\n  FETCH_MORE_LIVE_VIDEOS_HISTORY_START,\n} from \"../actions/ActionConstant\";\n\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nimport configuration from \"react-global-configuration\";\n\nfunction* liveVideoSaveAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.saveLiveVideo.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_broadcast_start\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(videoCallBroadcastSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\n        window.location.origin +\n          \"/join-live/\" +\n          response.data.data.live_video_unique_id\n      );\n    } else {\n      yield put(videoCallBroadcastFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallBroadcastFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveVideosAPI(action) {\n  try {\n    const response = yield api.postMethod(\"live_videos\", action.data);\n    if (response.data.success) {\n      yield put(fetchLiveVideosSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveVideosHistoryAPI(action) {\n  try {\n    const response = yield api.postMethod(\n      \"live_videos_owner_list\",\n      action.data\n    );\n    if (response.data.success) {\n      yield put(fetchLiveVideosHistorySuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosHistoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosHistoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSingleLiveVideoAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.singleLiveVideo.inputData\n    );\n    const response = yield api.postMethod(\"live_videos_view\", inputData);\n    if (response.data.success) {\n      yield put(fetchSingleLiveVideoSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleLiveVideoFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleLiveVideoFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveStripeAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.liveStripe.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_payment_by_card\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(livePaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\n        window.location.origin +\n          \"/live-video/\" +\n          response.data.data.live_video_unique_id\n      );\n    } else {\n      yield put(livePaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* livePaypalAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.livePaypal.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_payment_by_paypal\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(livePaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n\n      window.location.assign(\n        window.location.origin +\n          \"/live-video/\" +\n          response.data.data.live_video_unique_id\n      );\n    } else {\n      yield put(livePaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveViewerUpdateAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.liveViewerUpdate.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_viewer_update\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(liveViewerUpdateSuccess(response.data.data));\n      // const notificationMessage = getSuccessNotificationMessage(\n      //   response.data.message\n      // );\n      // yield put(createNotification(notificationMessage));\n    } else {\n      yield put(liveViewerUpdateFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(liveViewerUpdateFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveEndAPI(action) {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.liveEnd.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_broadcast_stop\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(liveVideoEndSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      setTimeout(() => {\n        if (action.data.isOwner) {\n          window.location.assign(\n            window.location.origin + \"/live-videos-history\"\n          );\n        } else {\n          window.location.assign(window.location.origin + \"/live-videos\");\n        }\n      }, 1000);\n    } else {\n      yield put(liveVideoEndFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(liveVideoEndFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveWalletAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.liveWallet.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_payment_by_wallet\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(livePaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\n        window.location.origin +\n          \"/live-video/\" +\n          response.data.data.live_video_unique_id\n      );\n    } else {\n      yield put(livePaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchPopularLiveVideosAPI(action) {\n  try {\n    const response = yield api.postMethod(\"popular_live_videos\", action.data);\n    if (response.data.success) {\n      yield put(fetchPopularLiveVideosSuccess(response.data.data));\n    } else {\n      yield put(fetchPopularLiveVideosFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPopularLiveVideosFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchRecommendedLiveVideosAPI(action) {\n  try {\n    const response = yield api.postMethod(\n      \"recommended_live_videos\",\n      action.data\n    );\n    if (response.data.success) {\n      yield put(fetchRecommendedLiveVideosSuccess(response.data.data));\n    } else {\n      yield put(fetchRecommendedLiveVideosFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchRecommendedLiveVideosFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchLiveVideoChatMessagesAPI(action) {\n  try {\n    const response = yield api.postMethod(\n      \"live_video_chat_messages\",\n      action.data\n    );\n    if (response.data.success) {\n      yield put(fetchLiveVideoChatMessagesSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideoChatMessagesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideoChatMessagesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchLiveVideosListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"live_videos_list\", action.data);\n    if (response.data.success) {\n      yield put(fetchLiveVideosListSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchLiveAudienceListAPI(action) {\n  try {\n    const response = yield api.postMethod(\n      \"live_videos_viewers_list\",\n      action.data\n    );\n\n    if (response.data.success) {\n      console.log(...response.data.data.viewers, \"res\");\n      yield put(fetchLiveAudienceListSuccess(response.data.data));\n      yield put(updateLiveAudianceCount(response.data.data.total_viewers));\n      yield put(\n        updateLiveAudianceEarnings({\n          total_earnings: response.data.data.total_revenue\n            .replace(configuration.get(\"configData.token_symbol\"), \"\")\n            .trim(),\n          total_earnings_formatted: response.data.data.total_revenue,\n        })\n      );\n    } else {\n      yield put(fetchLiveAudienceListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveAudienceListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchLiveVideoChatMessageListAPI(action) {\n  try {\n    const response = yield api.postMethod(\n      \"live_video_chat_messages\",\n      action.data\n    );\n    if (response.data.success) {\n      yield put(fetchLiveVideoChatMessagesSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideoChatMessagesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideoChatMessagesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveLivechatMessageAPI(action) {\n  try {\n    const response = yield api.postMethod(\n      \"live_chat_messages_save\",\n      action.data\n    );\n    if (response.data.success) {\n      yield put(saveLiveChatMessageSuccess(response.data.data));\n    } else {\n      yield put(saveLiveChatMessageFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveLiveChatMessageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* singleLiveVideoViewAPI(action) {\n  try {\n    const response = yield api.postMethod(\n      \"single_live_video_view\",\n      action.data\n    );\n    if (response.data.success) {\n      yield put(singleLiveVideoViewSuccess(response.data.data));\n    } else {\n      yield put(singleLiveVideoViewFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(singleLiveVideoViewFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(VIDEO_CALL_BROADCAST_START, liveVideoSaveAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEOS_START, liveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_MORE_LIVE_VIDEOS_START, liveVideosAPI)]);\n  yield all([\n    yield takeLatest(FETCH_LIVE_VIDEOS_HISTORY_START, liveVideosHistoryAPI),\n  ]);\n  yield all([\n    yield takeLatest(\n      FETCH_MORE_LIVE_VIDEOS_HISTORY_START,\n      liveVideosHistoryAPI\n    ),\n  ]);\n  // yield all([yield takeLatest(JOIN_LIVE_VIDEOS_START, joinLiveVideosAPI)]);\n  yield all([\n    yield takeLatest(FETCH_SINGLE_LIVE_VIDEOS_START, fetchSingleLiveVideoAPI),\n  ]);\n  yield all([\n    yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_STRIPE_START, liveStripeAPI),\n  ]);\n  yield all([\n    yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START, livePaypalAPI),\n  ]);\n  yield all([\n    yield takeLatest(LIVE_VIDEOS_VIEWER_UPDATE_START, liveViewerUpdateAPI),\n  ]);\n  yield all([yield takeLatest(LIVE_VIDEOS_END_START, liveEndAPI)]);\n  yield all([\n    yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_WALLET_START, liveWalletAPI),\n  ]);\n  yield all([\n    yield takeLatest(\n      FETCH_POPULAR_LIVE_VIDEOS_START,\n      fetchPopularLiveVideosAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      FETCH_MORE_POPULAR_LIVE_VIDEOS_START,\n      fetchPopularLiveVideosAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      FETCH_RECOMMENDED_LIVE_VIDEOS_START,\n      fetchRecommendedLiveVideosAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      FETCH_MORE_RECOMMENDED_LIVE_VIDEOS_START,\n      fetchRecommendedLiveVideosAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      FETCH_LIVE_VIDEOS_CHAT_MESSAGES_START,\n      fetchLiveVideoChatMessagesAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_LIVE_VIDEOS_LIST_START, fetchLiveVideosListAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_MORE_LIVE_VIDEOS_LIST_START, fetchLiveVideosListAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_LIVE_AUDIENCE_LIST_START, fetchLiveAudienceListAPI),\n  ]);\n  yield all([\n    yield takeLatest(\n      FETCH_LIVE_VIDEO_CHAT_MESSAGE_LIST_START,\n      fetchLiveVideoChatMessageListAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(SAVE_LIVE_CHAT_MESSAGE_START, saveLivechatMessageAPI),\n  ]);\n  yield all([\n    yield takeLatest(SINGLE_LIVE_VIDEO_VIEW_START, singleLiveVideoViewAPI),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}