{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_VIDEO_CALL_CHAT_MESSAGE_START, FETCH_VIDEO_CALL_REQUESTS_START, SAVE_VIDEO_CALL_AMOUNT_START, SAVE_VIDEO_CALL_REQUEST_START, VIDEO_CALL_REQUESTS_ACCEPT_START, VIDEO_CALL_REQUESTS_JOIN_START, VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START, VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START, VIDEO_CALL_REQUESTS_REJECT_FAILURE, VIDEO_CALL_REQUESTS_REJECT_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchVideoCallChatMessageFailure, fetchVideoCallChatMessageSuccess, fetchVideoCallRequestsFailure, fetchVideoCallRequestsSuccess, saveVideoCallAmountFailure, saveVideoCallAmountSuccess, saveVideoCallRequestFailure, saveVideoCallRequestSuccess, videoCallRequestsAcceptFailure, videoCallRequestsAcceptSuccess, videoCallRequestsJoinFailure, videoCallRequestsJoinSuccess, videoCallRequestsPaymentPaypalFailure, videoCallRequestsPaymentPaypalSuccess, videoCallRequestsPaymentStripeFailure, videoCallRequestsPaymentStripeSuccess, videoCallRequestsRejectFailure, videoCallRequestsRejectSuccess } from \"../actions/VideoCallAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nfunction* fetchVideoCallRequestsAPI() {\n  try {\n    const response = yield api.postMethod(\"video_call_requests\");\n    if (response.data.success) {\n      yield put(fetchVideoCallRequestsSuccess(response.data.data));\n    } else {\n      yield put(fetchVideoCallRequestsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchVideoCallRequestsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* saveVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(state => state.videocall.saveVideoCallRequest.inputData);\n    if (!inputData.start_time && !inputData.model_id) {\n      // !!!!! Dont change this condition. If changing get confirmation vidhya\n      yield put(saveVideoCallRequestFailure(\"Please fill the content\"));\n      const notificationMessage = getErrorNotificationMessage(\"Please fill the content\");\n      yield put(createNotification(notificationMessage));\n    } else {\n      const response = yield api.postMethod(\"video_call_requests_save\", inputData);\n      if (response.data.success) {\n        yield put(saveVideoCallRequestSuccess(response.data.data));\n        const notificationMessage = getSuccessNotificationMessage(response.data.message);\n        yield put(createNotification(notificationMessage));\n        // window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n      } else {\n        yield put(saveVideoCallRequestFailure(response.data.error));\n        const notificationMessage = getErrorNotificationMessage(response.data.error);\n        yield put(createNotification(notificationMessage));\n      }\n    }\n  } catch (error) {\n    yield put(saveVideoCallRequestFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* acceptVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(state => state.post.acceptVideoCallRequest.inputData);\n    const response = yield api.postMethod(\"video_call_requests_accept\", inputData);\n    if (response.data.success) {\n      yield put(videoCallRequestsAcceptSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsAcceptFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsAcceptFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* rejectVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(state => state.post.rejectVideoCallRequest.inputData);\n    const response = yield api.postMethod(\"video_call_requests_reject\", inputData);\n    if (response.data.success) {\n      yield put(videoCallRequestsRejectSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsRejectFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsRejectFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* joinVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(state => state.post.joinVideoCallRequest.inputData);\n    const response = yield api.postMethod(\"video_call_requests_join\", inputData);\n    if (response.data.success) {\n      yield put(videoCallRequestsJoinSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsJoinFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsJoinFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* PayStripeAPI() {\n  try {\n    const paymentInputData = yield select(state => state.post.videoCallRequestPayStripe.inputData);\n    const response = yield api.postMethod(\"video_call_payment_by_stripe\", paymentInputData);\n    if (response.data.success) {\n      yield put(videoCallRequestsPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(videoCallRequestsPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* PayPaypalAPI() {\n  try {\n    const paymentInputData = yield select(state => state.post.videoCallRequestPayPaypal.inputData);\n    const response = yield api.postMethod(\"video_call_payment_by_paypal\", paymentInputData);\n    if (response.data.success) {\n      yield put(videoCallRequestsPaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(videoCallRequestsPaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsPaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* saveVideoAmountAPI() {\n  try {\n    const inputData = yield select(state => state.post.saveVideoCallAmount.inputData);\n    const response = yield api.postMethod(\"video_call_amount_update\", inputData);\n    if (response.data.success) {\n      yield put(saveVideoCallAmountSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      // window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n    } else {\n      yield put(saveVideoCallAmountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveVideoCallAmountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchVideoCallChatAPI(action) {\n  try {\n    const response = yield api.postMethod(\"video_call_chat\", action.data);\n    if (response.data.success) {\n      yield put(fetchVideoCallChatMessageSuccess(response.data.data));\n    } else {\n      yield put(fetchVideoCallChatMessageFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchVideoCallChatMessageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_VIDEO_CALL_REQUESTS_START, fetchVideoCallRequestsAPI)]);\n  yield all([yield takeLatest(SAVE_VIDEO_CALL_REQUEST_START, saveVideoCallRequestAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_ACCEPT_START, acceptVideoCallRequestAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_REJECT_START, rejectVideoCallRequestAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_JOIN_START, joinVideoCallRequestAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START, PayStripeAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START, PayPaypalAPI)]);\n  yield all([yield takeLatest(SAVE_VIDEO_CALL_AMOUNT_START, saveVideoAmountAPI)]);\n  yield all([yield takeLatest(FETCH_VIDEO_CALL_CHAT_MESSAGE_START, fetchVideoCallChatAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","FETCH_VIDEO_CALL_CHAT_MESSAGE_START","FETCH_VIDEO_CALL_REQUESTS_START","SAVE_VIDEO_CALL_AMOUNT_START","SAVE_VIDEO_CALL_REQUEST_START","VIDEO_CALL_REQUESTS_ACCEPT_START","VIDEO_CALL_REQUESTS_JOIN_START","VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START","VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START","VIDEO_CALL_REQUESTS_REJECT_FAILURE","VIDEO_CALL_REQUESTS_REJECT_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchVideoCallChatMessageFailure","fetchVideoCallChatMessageSuccess","fetchVideoCallRequestsFailure","fetchVideoCallRequestsSuccess","saveVideoCallAmountFailure","saveVideoCallAmountSuccess","saveVideoCallRequestFailure","saveVideoCallRequestSuccess","videoCallRequestsAcceptFailure","videoCallRequestsAcceptSuccess","videoCallRequestsJoinFailure","videoCallRequestsJoinSuccess","videoCallRequestsPaymentPaypalFailure","videoCallRequestsPaymentPaypalSuccess","videoCallRequestsPaymentStripeFailure","videoCallRequestsPaymentStripeSuccess","videoCallRequestsRejectFailure","videoCallRequestsRejectSuccess","checkLogoutStatus","fetchVideoCallRequestsAPI","response","postMethod","data","success","error","notificationMessage","message","saveVideoCallRequestAPI","inputData","state","videocall","saveVideoCallRequest","start_time","model_id","acceptVideoCallRequestAPI","post","acceptVideoCallRequest","window","location","assign","rejectVideoCallRequestAPI","rejectVideoCallRequest","joinVideoCallRequestAPI","joinVideoCallRequest","PayStripeAPI","paymentInputData","videoCallRequestPayStripe","post_unique_id","PayPaypalAPI","videoCallRequestPayPaypal","saveVideoAmountAPI","saveVideoCallAmount","fetchVideoCallChatAPI","action","pageSaga"],"sources":["/home/mts/Vishal/src/store/sagas/VideoCallSaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  FETCH_VIDEO_CALL_CHAT_MESSAGE_START,\n  FETCH_VIDEO_CALL_REQUESTS_START,\n  SAVE_VIDEO_CALL_AMOUNT_START,\n  SAVE_VIDEO_CALL_REQUEST_START,\n  VIDEO_CALL_REQUESTS_ACCEPT_START,\n  VIDEO_CALL_REQUESTS_JOIN_START,\n  VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START,\n  VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START,\n  VIDEO_CALL_REQUESTS_REJECT_FAILURE,\n  VIDEO_CALL_REQUESTS_REJECT_START,\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchVideoCallChatMessageFailure,\n  fetchVideoCallChatMessageSuccess,\n  fetchVideoCallRequestsFailure,\n  fetchVideoCallRequestsSuccess,\n  saveVideoCallAmountFailure,\n  saveVideoCallAmountSuccess,\n  saveVideoCallRequestFailure,\n  saveVideoCallRequestSuccess,\n  videoCallRequestsAcceptFailure,\n  videoCallRequestsAcceptSuccess,\n  videoCallRequestsJoinFailure,\n  videoCallRequestsJoinSuccess,\n  videoCallRequestsPaymentPaypalFailure,\n  videoCallRequestsPaymentPaypalSuccess,\n  videoCallRequestsPaymentStripeFailure,\n  videoCallRequestsPaymentStripeSuccess,\n  videoCallRequestsRejectFailure,\n  videoCallRequestsRejectSuccess,\n} from \"../actions/VideoCallAction\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchVideoCallRequestsAPI() {\n  try {\n    const response = yield api.postMethod(\"video_call_requests\");\n    if (response.data.success) {\n      yield put(fetchVideoCallRequestsSuccess(response.data.data));\n    } else {\n      yield put(fetchVideoCallRequestsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchVideoCallRequestsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.videocall.saveVideoCallRequest.inputData\n    );\n\n    if (!inputData.start_time && !inputData.model_id) {\n      // !!!!! Dont change this condition. If changing get confirmation vidhya\n      yield put(saveVideoCallRequestFailure(\"Please fill the content\"));\n      const notificationMessage = getErrorNotificationMessage(\n        \"Please fill the content\"\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      const response = yield api.postMethod(\n        \"video_call_requests_save\",\n        inputData\n      );\n      if (response.data.success) {\n        yield put(saveVideoCallRequestSuccess(response.data.data));\n        const notificationMessage = getSuccessNotificationMessage(\n          response.data.message\n        );\n        yield put(createNotification(notificationMessage));\n        // window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n      } else {\n        yield put(saveVideoCallRequestFailure(response.data.error));\n        const notificationMessage = getErrorNotificationMessage(\n          response.data.error\n        );\n        yield put(createNotification(notificationMessage));\n      }\n    }\n  } catch (error) {\n    yield put(saveVideoCallRequestFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* acceptVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.acceptVideoCallRequest.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_requests_accept\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsAcceptSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsAcceptFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsAcceptFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* rejectVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.rejectVideoCallRequest.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_requests_reject\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsRejectSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsRejectFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsRejectFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* joinVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.joinVideoCallRequest.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_requests_join\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsJoinSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsJoinFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsJoinFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PayStripeAPI() {\n  try {\n    const paymentInputData = yield select(\n      (state) => state.post.videoCallRequestPayStripe.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_payment_by_stripe\",\n      paymentInputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(videoCallRequestsPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PayPaypalAPI() {\n  try {\n    const paymentInputData = yield select(\n      (state) => state.post.videoCallRequestPayPaypal.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_payment_by_paypal\",\n      paymentInputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsPaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(videoCallRequestsPaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsPaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveVideoAmountAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.saveVideoCallAmount.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_amount_update\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(saveVideoCallAmountSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      // window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n    } else {\n      yield put(saveVideoCallAmountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveVideoCallAmountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\n\nfunction* fetchVideoCallChatAPI(action) {\n  try {\n    const response = yield api.postMethod(\n      \"video_call_chat\",\n      action.data\n    );\n    if (response.data.success) {\n      yield put(fetchVideoCallChatMessageSuccess(response.data.data));\n    } else {\n      yield put(fetchVideoCallChatMessageFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchVideoCallChatMessageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(\n      FETCH_VIDEO_CALL_REQUESTS_START,\n      fetchVideoCallRequestsAPI\n    ),\n  ]);\n\n  yield all([\n    yield takeLatest(SAVE_VIDEO_CALL_REQUEST_START, saveVideoCallRequestAPI),\n  ]);\n  yield all([\n    yield takeLatest(\n      VIDEO_CALL_REQUESTS_ACCEPT_START,\n      acceptVideoCallRequestAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      VIDEO_CALL_REQUESTS_REJECT_START,\n      rejectVideoCallRequestAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(VIDEO_CALL_REQUESTS_JOIN_START, joinVideoCallRequestAPI),\n  ]);\n  yield all([\n    yield takeLatest(VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START, PayStripeAPI),\n  ]);\n  yield all([\n    yield takeLatest(VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START, PayPaypalAPI),\n  ]);\n  yield all([\n    yield takeLatest(SAVE_VIDEO_CALL_AMOUNT_START, saveVideoAmountAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_VIDEO_CALL_CHAT_MESSAGE_START, fetchVideoCallChatAPI),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}