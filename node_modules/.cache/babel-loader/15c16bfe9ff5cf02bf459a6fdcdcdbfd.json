{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_CATEGORIES_START, FETCH_CATEGORY_USERS_START, FOLLOW_CATEGORY_START, UPDATE_CATEGORY_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchCategoriesFailure, fetchCategoriesSuccess, fetchCategoryUsersFailure, fetchCategoryUsersSuccess, followCategoryFailure, followCategorySuccess, updateCategoryFailure, updateCategorySuccess } from \"../actions/CategoryAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nfunction* fetchCategoriesAPI() {\n  try {\n    const response = yield api.postMethod(\"categories_list\");\n    if (response.data.success) {\n      yield put(fetchCategoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* updateCategoryAPI() {\n  try {\n    const inputData = yield select(state => state.post.updateCategory.inputData);\n    const response = yield api.postMethod(\"posts_save_for_owner\", inputData);\n    if (response.data.success) {\n      yield put(updateCategorySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(updateCategoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(updateCategoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchCategoryUsersAPI() {\n  try {\n    const inputData = yield select(state => state.category.categoryUsers.inputData);\n    const response = yield api.postMethod(\"categories_view\", inputData);\n    if (response.data.success) {\n      yield put(fetchCategoryUsersSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoryUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoryUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* followCategoryAPI() {\n  try {\n    const inputData = yield select(state => state.post.delPost.inputData);\n    const response = yield api.postMethod(\"posts_delete_for_owner\", inputData);\n    if (response.data.success) {\n      yield put(followCategorySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(followCategoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(followCategoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CATEGORIES_START, fetchCategoriesAPI)]);\n  yield all([yield takeLatest(UPDATE_CATEGORY_START, updateCategoryAPI)]);\n  yield all([yield takeLatest(FETCH_CATEGORY_USERS_START, fetchCategoryUsersAPI)]);\n  yield all([yield takeLatest(FOLLOW_CATEGORY_START, followCategoryAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","FETCH_CATEGORIES_START","FETCH_CATEGORY_USERS_START","FOLLOW_CATEGORY_START","UPDATE_CATEGORY_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchCategoriesFailure","fetchCategoriesSuccess","fetchCategoryUsersFailure","fetchCategoryUsersSuccess","followCategoryFailure","followCategorySuccess","updateCategoryFailure","updateCategorySuccess","checkLogoutStatus","fetchCategoriesAPI","response","postMethod","data","success","error","notificationMessage","message","updateCategoryAPI","inputData","state","post","updateCategory","fetchCategoryUsersAPI","category","categoryUsers","followCategoryAPI","delPost","window","location","assign","pageSaga"],"sources":["/home/mts/FX-Project/src/store/sagas/CategorySaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  FETCH_CATEGORIES_START,\n  FETCH_CATEGORY_USERS_START,\n  FOLLOW_CATEGORY_START,\n  UPDATE_CATEGORY_START,\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchCategoriesFailure,\n  fetchCategoriesSuccess,\n  fetchCategoryUsersFailure,\n  fetchCategoryUsersSuccess,\n  followCategoryFailure,\n  followCategorySuccess,\n  updateCategoryFailure,\n  updateCategorySuccess,\n} from \"../actions/CategoryAction\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchCategoriesAPI() {\n  try {\n    const response = yield api.postMethod(\"categories_list\");\n    if (response.data.success) {\n      yield put(fetchCategoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* updateCategoryAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.updateCategory.inputData\n    );\n\n    const response = yield api.postMethod(\"posts_save_for_owner\", inputData);\n    if (response.data.success) {\n      yield put(updateCategorySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(updateCategoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(updateCategoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchCategoryUsersAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.category.categoryUsers.inputData\n    );\n    const response = yield api.postMethod(\"categories_view\", inputData);\n    if (response.data.success) {\n      yield put(fetchCategoryUsersSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoryUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoryUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* followCategoryAPI() {\n  try {\n    const inputData = yield select((state) => state.post.delPost.inputData);\n    const response = yield api.postMethod(\"posts_delete_for_owner\", inputData);\n    if (response.data.success) {\n      yield put(followCategorySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(followCategoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(followCategoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CATEGORIES_START, fetchCategoriesAPI)]);\n  yield all([yield takeLatest(UPDATE_CATEGORY_START, updateCategoryAPI)]);\n  yield all([\n    yield takeLatest(FETCH_CATEGORY_USERS_START, fetchCategoryUsersAPI),\n  ]);\n  yield all([yield takeLatest(FOLLOW_CATEGORY_START, followCategoryAPI)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}