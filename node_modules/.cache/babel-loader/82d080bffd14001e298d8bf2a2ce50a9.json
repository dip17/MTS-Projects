{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_POST_LIKED_START, SAVE_POST_LIKE_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchPostLikedFailure, fetchPostLikedSuccess, savePostLikeFailure, savePostLikeSuccess } from \"../actions/PostLikesAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\nimport { homePostsSuccess } from \"../actions/HomeAction\";\nimport { fetchSinglePostSuccess } from \"../actions/PostAction\";\nfunction* savePostLikesAPI(action) {\n  try {\n    // const inputData = yield select(\n    //   (state) => state.postLike.saveLike.inputData\n    // );\n    const response = yield api.postMethod(\"post_likes_save\", action.data);\n    if (response.data.success) {\n      yield put(savePostLikeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      let homeData = yield select(state => state.home.homePost.data);\n      homeData = {\n        ...homeData,\n        posts: homeData.posts.map(post => post.post_unique_id === response.data.data.post_unique_id ? response.data.data : post)\n      };\n      yield put(homePostsSuccess(homeData));\n      let singlePostData = yield select(state => state.post.singlePost.data);\n      if (Object.keys(singlePostData).length > 0) {\n        if (singlePostData.post.post_unique_id === response.data.data.post_unique_id) {\n          yield put(fetchSinglePostSuccess({\n            post: response.data.data\n          }));\n        }\n      }\n    } else {\n      yield put(savePostLikeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(savePostLikeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchPostLikesAPI() {\n  try {\n    const inputData = yield select(state => state.postLike.saveLike.inputData);\n    const response = yield api.postMethod(\"post_likes\", inputData);\n    if (response.data.success) {\n      yield put(fetchPostLikedSuccess(response.data.data));\n    } else {\n      yield put(fetchPostLikedFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPostLikedFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nexport default function* pageSaga() {\n  yield all([yield takeLatest(SAVE_POST_LIKE_START, savePostLikesAPI)]);\n  yield all([yield takeLatest(FETCH_POST_LIKED_START, fetchPostLikesAPI)]);\n}","map":{"version":3,"names":["call","select","put","takeLatest","all","api","FETCH_POST_LIKED_START","SAVE_POST_LIKE_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchPostLikedFailure","fetchPostLikedSuccess","savePostLikeFailure","savePostLikeSuccess","checkLogoutStatus","homePostsSuccess","fetchSinglePostSuccess","savePostLikesAPI","action","response","postMethod","data","success","notificationMessage","message","homeData","state","home","homePost","posts","map","post","post_unique_id","singlePostData","singlePost","Object","keys","length","error","fetchPostLikesAPI","inputData","postLike","saveLike","pageSaga"],"sources":["/home/mts/Vishal/src/store/sagas/PostLikesSaga.jsx"],"sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  FETCH_POST_LIKED_START,\n  SAVE_POST_LIKE_START,\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchPostLikedFailure,\n  fetchPostLikedSuccess,\n  savePostLikeFailure,\n  savePostLikeSuccess,\n} from \"../actions/PostLikesAction\";\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\nimport { homePostsSuccess } from \"../actions/HomeAction\";\nimport { fetchSinglePostSuccess } from \"../actions/PostAction\";\n\nfunction* savePostLikesAPI(action) {\n  try {\n    // const inputData = yield select(\n    //   (state) => state.postLike.saveLike.inputData\n    // );\n    const response = yield api.postMethod(\"post_likes_save\", action.data);\n    if (response.data.success) {\n      yield put(savePostLikeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      let homeData = yield select((state) => state.home.homePost.data);\n      homeData = {\n        ...homeData,\n        posts: homeData.posts.map((post) => post.post_unique_id === response.data.data.post_unique_id ? response.data.data : post)\n      }\n      yield put(homePostsSuccess(homeData));\n      let singlePostData = yield select((state) => state.post.singlePost.data);\n      if(Object.keys(singlePostData).length>0){\n        if(singlePostData.post.post_unique_id === response.data.data.post_unique_id) {\n          yield put(fetchSinglePostSuccess({ post: response.data.data }));\n        }\n      }\n    } else {\n      yield put(savePostLikeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(savePostLikeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchPostLikesAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.postLike.saveLike.inputData\n    );\n    const response = yield api.postMethod(\"post_likes\", inputData);\n    if (response.data.success) {\n      yield put(fetchPostLikedSuccess(response.data.data));\n    } else {\n      yield put(fetchPostLikedFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPostLikedFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(SAVE_POST_LIKE_START, savePostLikesAPI)]);\n  yield all([yield takeLatest(FETCH_POST_LIKED_START, fetchPostLikesAPI)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}